/Users/lenar/Desktop/LHypothesis/Example/LHypothesis/AppDelegate.swift:
    1|       |//
    2|       |//  AppDelegate.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by lenar-craftmaster on 11/16/2021.
    6|       |//  Copyright (c) 2021 lenar-craftmaster. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |
   11|       |@UIApplicationMain
   12|       |class AppDelegate: UIResponder, UIApplicationDelegate {
   13|       |
   14|       |    var window: UIWindow?
   15|       |
   16|       |
   17|      1|    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
   18|      1|        // Override point for customization after application launch.
   19|      1|        return true
   20|      1|    }
   21|       |
   22|      0|    func applicationWillResignActive(_ application: UIApplication) {
   23|      0|        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
   24|      0|        // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
   25|      0|    }
   26|       |
   27|      0|    func applicationDidEnterBackground(_ application: UIApplication) {
   28|      0|        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
   29|      0|        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
   30|      0|    }
   31|       |
   32|      0|    func applicationWillEnterForeground(_ application: UIApplication) {
   33|      0|        // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
   34|      0|    }
   35|       |
   36|      1|    func applicationDidBecomeActive(_ application: UIApplication) {
   37|      1|        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
   38|      1|    }
   39|       |
   40|      0|    func applicationWillTerminate(_ application: UIApplication) {
   41|      0|        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
   42|      0|    }
   43|       |
   44|       |
   45|       |}
   46|       |

/Users/lenar/Desktop/LHypothesis/Example/LHypothesis/ViewController.swift:
    1|       |//
    2|       |//  ViewController.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by lenar-craftmaster on 11/16/2021.
    6|       |//  Copyright (c) 2021 lenar-craftmaster. All rights reserved.
    7|       |//
    8|       |
    9|       |import UIKit
   10|       |import LHypothesis
   11|       |
   12|       |enum TestAnalyticsEvent: AnalyticsEvent {
   13|       |  
   14|       |    case viewDidLoad
   15|       |    
   16|      3|    var name: String {
   17|      3|        switch self {
   18|      3|        case .viewDidLoad:
   19|      3|          return "viewDidLoad"
   20|      3|        }
   21|      3|    }
   22|       |    
   23|      3|    var parameters: AnalyticsEventParameters? {
   24|      3|        switch self {
   25|      3|        case .viewDidLoad:
   26|      3|          return nil
   27|      3|        }
   28|      3|    }
   29|       |  
   30|       |}
   31|       |
   32|       |class ViewController: UIViewController {
   33|       |
   34|      1|    override func viewDidLoad() {
   35|      1|        super.viewDidLoad()
   36|      1|      
   37|      1|        // 1: Register providers
   38|      1|        Analytics.self <<~ FirebaseProvider() <<~ AppsFlyerProvider()
   39|      1|        // or
   40|      1|        //Analytics.register([FirebaseProvider(), AppsFlyerProvider()])
   41|      1|      
   42|      1|        // 2 `optional`: Set user properties
   43|      1|        Analytics.setUserProperty("18", forName: "age")
   44|      1|      
   45|      1|        // 3: Log event (by default log event for all providers)
   46|      1|        Analytics.log(event: TestAnalyticsEvent.viewDidLoad)
   47|      1|      
   48|      1|        // 3 `optional`: Log event for some providers
   49|      1|        Analytics.log(event: TestAnalyticsEvent.viewDidLoad, providersFilter: [FirebaseProvider.self])
   50|      1|    }
   51|       |
   52|       |}
   53|       |

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Core/AnalyticsProvider.swift:
    1|       |//
    2|       |//  AnalyticsProvider.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 16.11.2021.
    6|       |//
    7|       |
    8|       |public protocol AnalyticsProvider {
    9|       |  var name: String { get }
   10|       |  
   11|       |  func logEvent(_ event: AnalyticsEvent)
   12|       |  func setUserId(_ userId: String?)
   13|       |  func setUserProperty(_ property: String?, forName name: String)
   14|       |}
   15|       |
   16|       |extension AnalyticsProvider {
   17|       |  
   18|      1|  public var name: String {
   19|      1|    let type = type(of: self)
   20|      1|    return String(describing: type)
   21|      1|  }
   22|       |  
   23|       |}

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Core/LHypothesis.swift:
    1|       |//
    2|       |//  LHypothesis.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 16.11.2021.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |public enum Analytics {
   11|       |  
   12|       |  static var providers: [AnalyticsProvider] = []
   13|       |  
   14|      6|  public static func register(_ provider: AnalyticsProvider) {
   15|      6|    Self.providers.append(provider)
   16|      6|  }
   17|       |  
   18|      6|  public static func register(_ providers: [AnalyticsProvider]) {
   19|      6|    Self.providers.append(contentsOf: providers)
   20|      6|  }
   21|       |  
   22|      8|  public static func removeAllProviders() {
   23|      8|    Self.providers = []
   24|      8|  }
   25|       |  
   26|      6|  public static func log(event: AnalyticsEvent, providersFilter: [AnalyticsProvider.Type] = []) {
   27|      6|    if providersFilter.isEmpty {
   28|      6|      Self.providers.forEach {
   29|      6|        $0.logEvent(event)
   30|      6|      }
   31|      6|    } else {
   32|      6|      Self.providers.filter { provider in providersFilter.contains(where: { type(of: provider as Any) == $0 }) }.forEach {
   33|      3|        $0.logEvent(event)
   34|      3|      }
   35|      6|    }
   36|      6|  }
   37|       |  
   38|      4|  public static func setUserProperty(_ property: String?, forName name: String, providersFilter: [AnalyticsProvider.Type] = []) {
   39|      4|    if providersFilter.isEmpty {
   40|      6|      Self.providers.forEach {
   41|      6|        $0.setUserProperty(property, forName: name)
   42|      6|      }
   43|      4|    } else {
   44|      2|      Self.providers.filter { provider in providersFilter.contains(where: { type(of: provider as Any) == $0 }) }.forEach {
   45|      1|        $0.setUserProperty(property, forName: name)
   46|      1|      }
   47|      4|    }
   48|      4|  }
   49|       |  
   50|      2|  public static func setUserId(_ userId: String?) {
   51|      4|    Self.providers.forEach {
   52|      4|      $0.setUserId(userId)
   53|      4|    }
   54|      2|  }
   55|       |  
   56|       |}
   57|       |
   58|       |precedencegroup AnalyticalPrecedence {
   59|       |  associativity: left
   60|       |  higherThan: LogicalConjunctionPrecedence
   61|       |}
   62|       |
   63|       |infix operator <<~: AnalyticalPrecedence
   64|       |
   65|       |@discardableResult
   66|      4|public func <<~ (left: Analytics.Type, right: AnalyticsProvider) -> Analytics.Type {
   67|      4|  left.register(right)
   68|      4|  return left
   69|      4|}

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Providers/AppsFlyerProvider.swift:
    1|       |//
    2|       |//  AppsFlyerProvider.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 17.11.2021.
    6|       |//
    7|       |
    8|       |#if canImport(AppsFlyerLib)
    9|       |
   10|       |import Foundation
   11|       |import AppsFlyerLib
   12|       |
   13|       |public final class AppsFlyerProvider: AnalyticsProvider {
   14|       |  
   15|      1|  public init() {}
   16|       |  
   17|      1|  public func logEvent(_ event: AnalyticsEvent) {
   18|      1|    AppsFlyerLib.shared().logEvent(
   19|      1|      event.name,
   20|      1|      withValues: event.parameters
   21|      1|    )
   22|      1|  }
   23|       |  
   24|      0|  public func setUserId(_ userId: String?) {
   25|      0|    AppsFlyerLib.shared().customerUserID = userId
   26|      0|  }
   27|       |  
   28|      1|  public func setUserProperty(_ property: String?, forName name: String) {
   29|      1|    // AppsFlyer doesn't provide this function
   30|      1|  }
   31|       |  
   32|       |}
   33|       |
   34|       |#endif

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Providers/FirebaseProvider.swift:
    1|       |//
    2|       |//  FirebaseProvider.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 17.11.2021.
    6|       |//
    7|       |
    8|       |#if canImport(FirebaseAnalytics)
    9|       |
   10|       |import Foundation
   11|       |import FirebaseAnalytics
   12|       |
   13|       |public final class FirebaseProvider: AnalyticsProvider {
   14|       |  
   15|      1|  public init() {}
   16|       |  
   17|      2|  public func logEvent(_ event: AnalyticsEvent) {
   18|      2|    FirebaseAnalytics.Analytics.logEvent(event.name, parameters: event.parameters)
   19|      2|  }
   20|       |  
   21|      0|  public func setUserId(_ userId: String?) {
   22|      0|    FirebaseAnalytics.Analytics.setUserID(userId)
   23|      0|  }
   24|       |  
   25|      1|  public func setUserProperty(_ property: String?, forName name: String) {
   26|      1|    FirebaseAnalytics.Analytics.setUserProperty(property, forName: name)
   27|      1|  }
   28|       |  
   29|       |}
   30|       |
   31|       |#endif

