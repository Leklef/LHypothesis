/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Behavior.swift:
    1|       |/// A `Behavior` encapsulates a set of examples that can be re-used in several locations using the `itBehavesLike`
    2|       |/// function with a context instance of the generic type.
    3|       |open class Behavior<Context> {
    4|       |
    5|       |    /**
    6|       |     Override this variable if you want to provide custom name for this example group.
    7|       |    */
    8|      0|    open class var name: String { return String(describing: self) }
    9|       |
   10|       |    /**
   11|       |     Override this method in your behavior to define a set of reusable examples.
   12|       |
   13|       |     This behaves just like an example group defines using `describe` or `context`--it may contain any number of `beforeEach`
   14|       |     and `afterEach` closures, as well as any number of examples (defined using `it`).
   15|       |
   16|       |     - parameter aContext: A closure that, when evaluated, returns a `Context` instance that provide the information on the subject.
   17|       |    */
   18|      0|    open class func spec(_ aContext: @escaping () -> Context) {}
   19|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Callsite.swift:
    1|       |import Foundation
    2|       |
    3|       |#if canImport(Darwin)
    4|       |// swiftlint:disable type_name
    5|       |@objcMembers
    6|       |public class _CallsiteBase: NSObject {}
    7|       |#else
    8|       |public class _CallsiteBase: NSObject {}
    9|       |// swiftlint:enable type_name
   10|       |#endif
   11|       |
   12|       |// Ideally we would always use `StaticString` as the type for tracking the file name
   13|       |// in which an example is defined, for consistency with `assert` etc. from the
   14|       |// stdlib, and because recent versions of the XCTest overlay require `StaticString`
   15|       |// when calling `XCTFail`. Under the Objective-C runtime (i.e. building on macOS), we
   16|       |// have to use `String` instead because StaticString can't be generated from Objective-C
   17|       |#if SWIFT_PACKAGE
   18|       |public typealias FileString = StaticString
   19|       |#else
   20|       |public typealias FileString = String
   21|       |#endif
   22|       |
   23|       |/**
   24|       |    An object encapsulating the file and line number at which
   25|       |    a particular example is defined.
   26|       |*/
   27|       |final public class Callsite: _CallsiteBase {
   28|       |    /**
   29|       |        The absolute path of the file in which an example is defined.
   30|       |    */
   31|       |    public let file: FileString
   32|       |
   33|       |    /**
   34|       |        The line number on which an example is defined.
   35|       |    */
   36|       |    public let line: UInt
   37|       |
   38|      9|    internal init(file: FileString, line: UInt) {
   39|      9|        self.file = file
   40|      9|        self.line = line
   41|      9|    }
   42|       |}
   43|       |
   44|       |extension Callsite {
   45|       |    /**
   46|       |        Returns a boolean indicating whether two Callsite objects are equal.
   47|       |        If two callsites are in the same file and on the same line, they must be equal.
   48|       |    */
   49|      0|    @nonobjc public static func == (lhs: Callsite, rhs: Callsite) -> Bool {
   50|      0|        return String(describing: lhs.file) == String(describing: rhs.file) && lhs.line == rhs.line
   51|      0|    }
   52|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Configuration/Configuration.swift:
    1|       |import Foundation
    2|       |
    3|       |/**
    4|       |    A closure that temporarily exposes a Configuration object within
    5|       |    the scope of the closure.
    6|       |*/
    7|       |public typealias QuickConfigurer = (_ configuration: Configuration) -> Void
    8|       |
    9|       |/**
   10|       |    A closure that, given metadata about an example, returns a boolean value
   11|       |    indicating whether that example should be run.
   12|       |*/
   13|       |public typealias ExampleFilter = (_ example: Example) -> Bool
   14|       |
   15|       |/**
   16|       |    A configuration encapsulates various options you can use
   17|       |    to configure Quick's behavior.
   18|       |*/
   19|       |final public class Configuration: NSObject {
   20|      1|    internal let exampleHooks = ExampleHooks()
   21|      1|    internal let suiteHooks = SuiteHooks()
   22|      1|    internal var exclusionFilters: [ExampleFilter] = [
   23|      9|        { example in // swiftlint:disable:this opening_brace
   24|      0|            if let pending = example.filterFlags[Filter.pending] {
   25|      0|                return pending
   26|      9|            } else {
   27|      9|                return false
   28|      0|            }
   29|      0|        },
   30|      1|    ]
   31|      1|    internal var inclusionFilters: [ExampleFilter] = [
   32|     27|        { example in // swiftlint:disable:this opening_brace
   33|      0|            if let focused = example.filterFlags[Filter.focused] {
   34|      0|                return focused
   35|     27|            } else {
   36|     27|                return false
   37|      0|            }
   38|      0|        },
   39|      1|    ]
   40|       |
   41|       |    /**
   42|       |        Run all examples if none match the configured filters. True by default.
   43|       |    */
   44|       |    public var runAllWhenEverythingFiltered = true
   45|       |
   46|       |    /**
   47|       |        Registers an inclusion filter.
   48|       |
   49|       |        All examples are filtered using all inclusion filters.
   50|       |        The remaining examples are run. If no examples remain, all examples are run.
   51|       |
   52|       |        - parameter filter: A filter that, given an example, returns a value indicating
   53|       |                       whether that example should be included in the examples
   54|       |                       that are run.
   55|       |    */
   56|      0|    public func include(_ filter: @escaping ExampleFilter) {
   57|      0|        inclusionFilters.append(filter)
   58|      0|    }
   59|       |
   60|       |    /**
   61|       |        Registers an exclusion filter.
   62|       |
   63|       |        All examples that remain after being filtered by the inclusion filters are
   64|       |        then filtered via all exclusion filters.
   65|       |
   66|       |        - parameter filter: A filter that, given an example, returns a value indicating
   67|       |                       whether that example should be excluded from the examples
   68|       |                       that are run.
   69|       |    */
   70|      0|    public func exclude(_ filter: @escaping ExampleFilter) {
   71|      0|        exclusionFilters.append(filter)
   72|      0|    }
   73|       |
   74|       |    /**
   75|       |        Identical to Quick.Configuration.beforeEach, except the closure is
   76|       |        provided with metadata on the example that the closure is being run
   77|       |        prior to.
   78|       |    */
   79|       |#if canImport(Darwin)
   80|       |    @objc(beforeEachWithMetadata:)
   81|      0|    public func beforeEach(_ closure: @escaping BeforeExampleWithMetadataClosure) {
   82|      0|        exampleHooks.appendBefore(closure)
   83|      0|    }
   84|       |#else
   85|       |    public func beforeEach(_ closure: @escaping BeforeExampleWithMetadataClosure) {
   86|       |        exampleHooks.appendBefore(closure)
   87|       |    }
   88|       |#endif
   89|       |
   90|       |    /**
   91|       |        Like Quick.DSL.beforeEach, this configures Quick to execute the
   92|       |        given closure before each example that is run. The closure
   93|       |        passed to this method is executed before each example Quick runs,
   94|       |        globally across the test suite. You may call this method multiple
   95|       |        times across multiple +[QuickConfigure configure:] methods in order
   96|       |        to define several closures to run before each example.
   97|       |
   98|       |        Note that, since Quick makes no guarantee as to the order in which
   99|       |        +[QuickConfiguration configure:] methods are evaluated, there is no
  100|       |        guarantee as to the order in which beforeEach closures are evaluated
  101|       |        either. Multiple beforeEach defined on a single configuration, however,
  102|       |        will be executed in the order they're defined.
  103|       |
  104|       |        - parameter closure: The closure to be executed before each example
  105|       |                        in the test suite.
  106|       |    */
  107|      0|    public func beforeEach(_ closure: @escaping BeforeExampleClosure) {
  108|      0|        exampleHooks.appendBefore(closure)
  109|      0|    }
  110|       |
  111|       |    /**
  112|       |        Identical to Quick.Configuration.afterEach, except the closure
  113|       |        is provided with metadata on the example that the closure is being
  114|       |        run after.
  115|       |    */
  116|       |#if canImport(Darwin)
  117|       |    @objc(afterEachWithMetadata:)
  118|      0|    public func afterEach(_ closure: @escaping AfterExampleWithMetadataClosure) {
  119|      0|        exampleHooks.appendAfter(closure)
  120|      0|    }
  121|       |#else
  122|       |    public func afterEach(_ closure: @escaping AfterExampleWithMetadataClosure) {
  123|       |        exampleHooks.appendAfter(closure)
  124|       |    }
  125|       |#endif
  126|       |
  127|       |    /**
  128|       |        Like Quick.DSL.afterEach, this configures Quick to execute the
  129|       |        given closure after each example that is run. The closure
  130|       |        passed to this method is executed after each example Quick runs,
  131|       |        globally across the test suite. You may call this method multiple
  132|       |        times across multiple +[QuickConfigure configure:] methods in order
  133|       |        to define several closures to run after each example.
  134|       |
  135|       |        Note that, since Quick makes no guarantee as to the order in which
  136|       |        +[QuickConfiguration configure:] methods are evaluated, there is no
  137|       |        guarantee as to the order in which afterEach closures are evaluated
  138|       |        either. Multiple afterEach defined on a single configuration, however,
  139|       |        will be executed in the order they're defined.
  140|       |
  141|       |        - parameter closure: The closure to be executed before each example
  142|       |                        in the test suite.
  143|       |    */
  144|      0|    public func afterEach(_ closure: @escaping AfterExampleClosure) {
  145|      0|        exampleHooks.appendAfter(closure)
  146|      0|    }
  147|       |
  148|       |    /**
  149|       |        Like Quick.DSL.beforeSuite, this configures Quick to execute
  150|       |        the given closure prior to any and all examples that are run.
  151|       |        The two methods are functionally equivalent.
  152|       |    */
  153|      0|    public func beforeSuite(_ closure: @escaping BeforeSuiteClosure) {
  154|      0|        suiteHooks.appendBefore(closure)
  155|      0|    }
  156|       |
  157|       |    /**
  158|       |        Like Quick.DSL.afterSuite, this configures Quick to execute
  159|       |        the given closure after all examples have been run.
  160|       |        The two methods are functionally equivalent.
  161|       |    */
  162|      0|    public func afterSuite(_ closure: @escaping AfterSuiteClosure) {
  163|      0|        suiteHooks.appendAfter(closure)
  164|      0|    }
  165|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Configuration/QuickConfiguration.swift:
    1|       |import Foundation
    2|       |import XCTest
    3|       |
    4|       |#if SWIFT_PACKAGE
    5|       |
    6|       |open class QuickConfiguration: NSObject {
    7|       |    open class func configure(_ configuration: Configuration) {}
    8|       |}
    9|       |
   10|       |#endif
   11|       |
   12|       |extension QuickConfiguration {
   13|       |    #if !canImport(Darwin)
   14|       |    private static var configurationSubclasses: [QuickConfiguration.Type] = []
   15|       |    #endif
   16|       |
   17|       |    /// Finds all direct subclasses of QuickConfiguration and passes them to the block provided.
   18|       |    /// The classes are iterated over in the order that objc_getClassList returns them.
   19|       |    ///
   20|       |    /// - parameter block: A block that takes a QuickConfiguration.Type.
   21|       |    ///                    This block will be executed once for each subclass of QuickConfiguration.
   22|      1|    private static func enumerateSubclasses(_ block: (QuickConfiguration.Type) -> Void) {
   23|      1|        #if canImport(Darwin)
   24|      1|        let classesCount = objc_getClassList(nil, 0)
   25|      1|
   26|      0|        guard classesCount > 0 else {
   27|      0|            return
   28|      1|        }
   29|      1|
   30|      1|        let classes = UnsafeMutablePointer<AnyClass?>.allocate(capacity: Int(classesCount))
   31|      1|        defer { free(classes) }
   32|      1|
   33|      1|        objc_getClassList(AutoreleasingUnsafeMutablePointer(classes), classesCount)
   34|      1|
   35|      1|        var configurationSubclasses: [QuickConfiguration.Type] = []
   36|  33.4k|        for index in 0..<classesCount {
   37|  33.4k|            guard
   38|  33.4k|                let subclass = classes[Int(index)],
   39|  33.4k|                let superclass = class_getSuperclass(subclass),
   40|  33.4k|                superclass is QuickConfiguration.Type
   41|  33.4k|                else { continue }
   42|      0|
   43|      0|            // swiftlint:disable:next force_cast
   44|      0|            configurationSubclasses.append(subclass as! QuickConfiguration.Type)
   45|      1|        }
   46|      1|        #endif
   47|      1|
   48|      1|        configurationSubclasses.forEach(block)
   49|      1|    }
   50|       |
   51|       |    #if canImport(Darwin)
   52|       |    @objc
   53|      1|    static func configureSubclassesIfNeeded(world: World) {
   54|      1|        _configureSubclassesIfNeeded(world: world)
   55|      1|    }
   56|       |    #else
   57|       |    static func configureSubclassesIfNeeded(_ configurationSubclasses: [QuickConfiguration.Type]? = nil, world: World) {
   58|       |        // Storing subclasses for later use (will be used when running additional test suites)
   59|       |        if let configurationSubclasses = configurationSubclasses {
   60|       |            self.configurationSubclasses = configurationSubclasses
   61|       |        }
   62|       |
   63|       |        _configureSubclassesIfNeeded(world: world)
   64|       |    }
   65|       |    #endif
   66|       |
   67|      1|    private static func _configureSubclassesIfNeeded(world: World) {
   68|      1|        if world.isConfigurationFinalized { return }
   69|      1|
   70|      1|        // Perform all configurations (ensures that shared examples have been discovered)
   71|      1|        world.configure { configuration in
   72|      0|            enumerateSubclasses { configurationClass in
   73|      0|                configurationClass.configure(configuration)
   74|      0|            }
   75|      1|        }
   76|      1|        world.finalizeConfiguration()
   77|      1|    }
   78|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/DSL/DSL.swift:
    1|       |// swiftlint:disable line_length
    2|       |
    3|       |/**
    4|       |    Defines a closure to be run prior to any examples in the test suite.
    5|       |    You may define an unlimited number of these closures, but there is no
    6|       |    guarantee as to the order in which they're run.
    7|       |
    8|       |    If the test suite crashes before the first example is run, this closure
    9|       |    will not be executed.
   10|       |
   11|       |    - parameter closure: The closure to be run prior to any examples in the test suite.
   12|       |*/
   13|      0|public func beforeSuite(_ closure: @escaping BeforeSuiteClosure) {
   14|      0|    World.sharedWorld.beforeSuite(closure)
   15|      0|}
   16|       |
   17|       |/**
   18|       |    Defines a closure to be run after all of the examples in the test suite.
   19|       |    You may define an unlimited number of these closures, but there is no
   20|       |    guarantee as to the order in which they're run.
   21|       |
   22|       |    If the test suite crashes before all examples are run, this closure
   23|       |    will not be executed.
   24|       |
   25|       |    - parameter closure: The closure to be run after all of the examples in the test suite.
   26|       |*/
   27|      0|public func afterSuite(_ closure: @escaping AfterSuiteClosure) {
   28|      0|    World.sharedWorld.afterSuite(closure)
   29|      0|}
   30|       |
   31|       |/**
   32|       |    Defines a group of shared examples. These examples can be re-used in several locations
   33|       |    by using the `itBehavesLike` function.
   34|       |
   35|       |    - parameter name: The name of the shared example group. This must be unique across all shared example
   36|       |                 groups defined in a test suite.
   37|       |    - parameter closure: A closure containing the examples. This behaves just like an example group defined
   38|       |                    using `describe` or `context`--the closure may contain any number of `beforeEach`
   39|       |                    and `afterEach` closures, as well as any number of examples (defined using `it`).
   40|       |*/
   41|      0|public func sharedExamples(_ name: String, closure: @escaping () -> Void) {
   42|      0|    World.sharedWorld.sharedExamples(name) { _ in closure() }
   43|      0|}
   44|       |
   45|       |/**
   46|       |    Defines a group of shared examples. These examples can be re-used in several locations
   47|       |    by using the `itBehavesLike` function.
   48|       |
   49|       |    - parameter name: The name of the shared example group. This must be unique across all shared example
   50|       |                 groups defined in a test suite.
   51|       |    - parameter closure: A closure containing the examples. This behaves just like an example group defined
   52|       |                    using `describe` or `context`--the closure may contain any number of `beforeEach`
   53|       |                    and `afterEach` closures, as well as any number of examples (defined using `it`).
   54|       |
   55|       |                    The closure takes a SharedExampleContext as an argument. This context is a function
   56|       |                    that can be executed to retrieve parameters passed in via an `itBehavesLike` function.
   57|       |*/
   58|      0|public func sharedExamples(_ name: String, closure: @escaping SharedExampleClosure) {
   59|      0|    World.sharedWorld.sharedExamples(name, closure: closure)
   60|      0|}
   61|       |
   62|       |/**
   63|       |    Defines an example group. Example groups are logical groupings of examples.
   64|       |    Example groups can share setup and teardown code.
   65|       |
   66|       |    - parameter description: An arbitrary string describing the example group.
   67|       |    - parameter closure: A closure that can contain other examples.
   68|       |    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
   69|       |*/
   70|      7|public func describe(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
   71|      7|    World.sharedWorld.describe(description, flags: flags, closure: closure)
   72|      7|}
   73|       |
   74|       |/**
   75|       |    Defines an example group. Equivalent to `describe`.
   76|       |*/
   77|      7|public func context(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
   78|      7|    World.sharedWorld.context(description, flags: flags, closure: closure)
   79|      7|}
   80|       |
   81|       |/**
   82|       |    Defines a closure to be run prior to each example in the current example
   83|       |    group. This closure is not run for pending or otherwise disabled examples.
   84|       |    An example group may contain an unlimited number of beforeEach. They'll be
   85|       |    run in the order they're defined, but you shouldn't rely on that behavior.
   86|       |
   87|       |    - parameter closure: The closure to be run prior to each example.
   88|       |*/
   89|      4|public func beforeEach(_ closure: @escaping BeforeExampleClosure) {
   90|      4|    World.sharedWorld.beforeEach(closure)
   91|      4|}
   92|       |
   93|       |/**
   94|       |    Identical to Quick.DSL.beforeEach, except the closure is provided with
   95|       |    metadata on the example that the closure is being run prior to.
   96|       |*/
   97|      0|public func beforeEach(_ closure: @escaping BeforeExampleWithMetadataClosure) {
   98|      0|    World.sharedWorld.beforeEach(closure: closure)
   99|      0|}
  100|       |
  101|       |/**
  102|       |    Defines a closure to be run after each example in the current example
  103|       |    group. This closure is not run for pending or otherwise disabled examples.
  104|       |    An example group may contain an unlimited number of afterEach. They'll be
  105|       |    run in the order they're defined, but you shouldn't rely on that behavior.
  106|       |
  107|       |    - parameter closure: The closure to be run after each example.
  108|       |*/
  109|      0|public func afterEach(_ closure: @escaping AfterExampleClosure) {
  110|      0|    World.sharedWorld.afterEach(closure)
  111|      0|}
  112|       |
  113|       |/**
  114|       |    Identical to Quick.DSL.afterEach, except the closure is provided with
  115|       |    metadata on the example that the closure is being run after.
  116|       |*/
  117|      0|public func afterEach(_ closure: @escaping AfterExampleWithMetadataClosure) {
  118|      0|    World.sharedWorld.afterEach(closure: closure)
  119|      0|}
  120|       |
  121|       |/**
  122|       |    Defines an example. Examples use assertions to demonstrate how code should
  123|       |    behave. These are like "tests" in XCTest.
  124|       |
  125|       |    - parameter description: An arbitrary string describing what the example is meant to specify.
  126|       |    - parameter closure: A closure that can contain assertions.
  127|       |    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
  128|       |                  Empty by default.
  129|       |    - parameter file: The absolute path to the file containing the example. A sensible default is provided.
  130|       |    - parameter line: The line containing the example. A sensible default is provided.
  131|       |*/
  132|      9|public func it(_ description: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, closure: @escaping () throws -> Void) {
  133|      9|    World.sharedWorld.it(description, flags: flags, file: file, line: line, closure: closure)
  134|      9|}
  135|       |
  136|       |/**
  137|       |    Inserts the examples defined using a `sharedExamples` function into the current example group.
  138|       |    The shared examples are executed at this location, as if they were written out manually.
  139|       |
  140|       |    - parameter name: The name of the shared examples group to be executed. This must be identical to the
  141|       |                 name of a shared examples group defined using `sharedExamples`. If there are no shared
  142|       |                 examples that match the name given, an exception is thrown and the test suite will crash.
  143|       |    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
  144|       |                  Empty by default.
  145|       |    - parameter file: The absolute path to the file containing the current example group. A sensible default is provided.
  146|       |    - parameter line: The line containing the current example group. A sensible default is provided.
  147|       |*/
  148|      0|public func itBehavesLike(_ name: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line) {
  149|      0|    itBehavesLike(name, flags: flags, file: file, line: line, sharedExampleContext: { return [:] })
  150|      0|}
  151|       |
  152|       |/**
  153|       |    Inserts the examples defined using a `sharedExamples` function into the current example group.
  154|       |    The shared examples are executed at this location, as if they were written out manually.
  155|       |    This function also passes those shared examples a context that can be evaluated to give the shared
  156|       |    examples extra information on the subject of the example.
  157|       |
  158|       |    - parameter name: The name of the shared examples group to be executed. This must be identical to the
  159|       |                 name of a shared examples group defined using `sharedExamples`. If there are no shared
  160|       |                 examples that match the name given, an exception is thrown and the test suite will crash.
  161|       |    - parameter sharedExampleContext: A closure that, when evaluated, returns key-value pairs that provide the
  162|       |                                 shared examples with extra information on the subject of the example.
  163|       |    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
  164|       |                  Empty by default.
  165|       |    - parameter file: The absolute path to the file containing the current example group. A sensible default is provided.
  166|       |    - parameter line: The line containing the current example group. A sensible default is provided.
  167|       |*/
  168|      0|public func itBehavesLike(_ name: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, sharedExampleContext: @escaping SharedExampleContext) {
  169|      0|    World.sharedWorld.itBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: flags, file: file, line: line)
  170|      0|}
  171|       |
  172|       |/**
  173|       |    Inserts the examples defined using a `Behavior` into the current example group.
  174|       |    The shared examples are executed at this location, as if they were written out manually.
  175|       |    This function also passes a strongly-typed context that can be evaluated to give the shared examples extra information on the subject of the example.
  176|       |
  177|       |    - parameter behavior: The type of `Behavior` class defining the example group to be executed.
  178|       |    - parameter context: A closure that, when evaluated, returns an instance of `Behavior`'s context type to provide its example group with extra information on the subject of the example.
  179|       |    - parameter flags: A mapping of string keys to booleans that can be used to filter examples or example groups.
  180|       |                  Empty by default.
  181|       |    - parameter file: The absolute path to the file containing the current example group. A sensible default is provided.
  182|       |    - parameter line: The line containing the current example group. A sensible default is provided.
  183|       | */
  184|      0|public func itBehavesLike<C>(_ behavior: Behavior<C>.Type, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, context: @escaping () -> C) {
  185|      0|    World.sharedWorld.itBehavesLike(behavior, context: context, flags: flags, file: file, line: line)
  186|      0|}
  187|       |
  188|       |/**
  189|       |    Defines an example or example group that should not be executed. Use `pending` to temporarily disable
  190|       |    examples or groups that should not be run yet.
  191|       |
  192|       |    - parameter description: An arbitrary string describing the example or example group.
  193|       |    - parameter closure: A closure that will not be evaluated.
  194|       |*/
  195|      0|public func pending(_ description: String, closure: () -> Void) {
  196|      0|    World.sharedWorld.pending(description, closure: closure)
  197|      0|}
  198|       |
  199|       |/**
  200|       |    Use this to quickly mark a `describe` closure as pending.
  201|       |    This disables all examples within the closure.
  202|       |*/
  203|      0|public func xdescribe(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
  204|      0|    World.sharedWorld.xdescribe(description, flags: flags, closure: closure)
  205|      0|}
  206|       |
  207|       |/**
  208|       |    Use this to quickly mark a `context` closure as pending.
  209|       |    This disables all examples within the closure.
  210|       |*/
  211|      0|public func xcontext(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
  212|      0|    xdescribe(description, flags: flags, closure: closure)
  213|      0|}
  214|       |
  215|       |/**
  216|       |    Use this to quickly mark an `it` closure as pending.
  217|       |    This disables the example and ensures the code within the closure is never run.
  218|       |*/
  219|      0|public func xit(_ description: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, closure: @escaping () throws -> Void) {
  220|      0|    World.sharedWorld.xit(description, flags: flags, file: file, line: line, closure: closure)
  221|      0|}
  222|       |
  223|       |/**
  224|       |    Use this to quicklu mark an `itBehavesLike` closure as pending.
  225|       |    This disables the example group defined by this behavior and ensures the code within is never run.
  226|       |*/
  227|      0|public func xitBehavesLike<C>(_ behavior: Behavior<C>.Type, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, context: @escaping () -> C) {
  228|      0|    World.sharedWorld.xitBehavesLike(behavior, context: context, flags: flags, file: file, line: line)
  229|      0|}
  230|       |/**
  231|       |    Use this to quickly focus a `describe` closure, focusing the examples in the closure.
  232|       |    If any examples in the test suite are focused, only those examples are executed.
  233|       |    This trumps any explicitly focused or unfocused examples within the closure--they are all treated as focused.
  234|       |*/
  235|      0|public func fdescribe(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
  236|      0|    World.sharedWorld.fdescribe(description, flags: flags, closure: closure)
  237|      0|}
  238|       |
  239|       |/**
  240|       |    Use this to quickly focus a `context` closure. Equivalent to `fdescribe`.
  241|       |*/
  242|      0|public func fcontext(_ description: String, flags: FilterFlags = [:], closure: () -> Void) {
  243|      0|    fdescribe(description, flags: flags, closure: closure)
  244|      0|}
  245|       |
  246|       |/**
  247|       |    Use this to quickly focus an `it` closure, focusing the example.
  248|       |    If any examples in the test suite are focused, only those examples are executed.
  249|       |*/
  250|      0|public func fit(_ description: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, closure: @escaping () throws -> Void) {
  251|      0|    World.sharedWorld.fit(description, flags: flags, file: file, line: line, closure: closure)
  252|      0|}
  253|       |
  254|       |/**
  255|       |    Use this to quickly focus an `itBehavesLike` closure.
  256|       |*/
  257|      0|public func fitBehavesLike(_ name: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line) {
  258|      0|    fitBehavesLike(name, flags: flags, file: file, line: line, sharedExampleContext: { return [:] })
  259|      0|}
  260|       |
  261|       |/**
  262|       |    Use this to quickly focus an `itBehavesLike` closure.
  263|       |*/
  264|      0|public func fitBehavesLike(_ name: String, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, sharedExampleContext: @escaping SharedExampleContext) {
  265|      0|    World.sharedWorld.fitBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: flags, file: file, line: line)
  266|      0|}
  267|       |
  268|       |/**
  269|       | Use this to quickly focus on `itBehavesLike` closure.
  270|       | */
  271|      0|public func fitBehavesLike<C>(_ behavior: Behavior<C>.Type, flags: FilterFlags = [:], file: FileString = #file, line: UInt = #line, context: @escaping () -> C) {
  272|      0|    World.sharedWorld.fitBehavesLike(behavior, context: context, flags: flags, file: file, line: line)
  273|      0|}
  274|       |
  275|       |// swiftlint:enable line_length

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/DSL/World+DSL.swift:
    1|       |import Foundation
    2|       |
    3|       |/**
    4|       |    Adds methods to World to support top-level DSL functions (Swift) and
    5|       |    macros (Objective-C). These functions map directly to the DSL that test
    6|       |    writers use in their specs.
    7|       |*/
    8|       |extension World {
    9|      0|    internal func beforeSuite(_ closure: @escaping BeforeSuiteClosure) {
   10|      0|        suiteHooks.appendBefore(closure)
   11|      0|    }
   12|       |
   13|      0|    internal func afterSuite(_ closure: @escaping AfterSuiteClosure) {
   14|      0|        suiteHooks.appendAfter(closure)
   15|      0|    }
   16|       |
   17|      0|    internal func sharedExamples(_ name: String, closure: @escaping SharedExampleClosure) {
   18|      0|        registerSharedExample(name, closure: closure)
   19|      0|    }
   20|       |
   21|     14|    internal func describe(_ description: String, flags: FilterFlags, closure: () -> Void) {
   22|      0|        guard currentExampleMetadata == nil else {
   23|      0|            raiseError("'describe' cannot be used inside '\(currentPhase)', 'describe' may only be used inside 'context' or 'describe'.")
   24|     14|        }
   25|      0|        guard currentExampleGroup != nil else {
   26|      0|            // swiftlint:disable:next line_length
   27|      0|            raiseError("Error: example group was not created by its parent QuickSpec spec. Check that describe() or context() was used in QuickSpec.spec() and not a more general context (i.e. an XCTestCase test)")
   28|     14|        }
   29|     14|        let group = ExampleGroup(description: description, flags: flags)
   30|     14|        currentExampleGroup.appendExampleGroup(group)
   31|     14|        performWithCurrentExampleGroup(group, closure: closure)
   32|     14|    }
   33|       |
   34|      7|    internal func context(_ description: String, flags: FilterFlags, closure: () -> Void) {
   35|      0|        guard currentExampleMetadata == nil else {
   36|      0|            raiseError("'context' cannot be used inside '\(currentPhase)', 'context' may only be used inside 'context' or 'describe'.")
   37|      7|        }
   38|      7|        self.describe(description, flags: flags, closure: closure)
   39|      7|    }
   40|       |
   41|      0|    internal func fdescribe(_ description: String, flags: FilterFlags, closure: () -> Void) {
   42|      0|        var focusedFlags = flags
   43|      0|        focusedFlags[Filter.focused] = true
   44|      0|        self.describe(description, flags: focusedFlags, closure: closure)
   45|      0|    }
   46|       |
   47|      0|    internal func xdescribe(_ description: String, flags: FilterFlags, closure: () -> Void) {
   48|      0|        var pendingFlags = flags
   49|      0|        pendingFlags[Filter.pending] = true
   50|      0|        self.describe(description, flags: pendingFlags, closure: closure)
   51|      0|    }
   52|       |
   53|      4|    internal func beforeEach(_ closure: @escaping BeforeExampleClosure) {
   54|      0|        guard currentExampleMetadata == nil else {
   55|      0|            raiseError("'beforeEach' cannot be used inside '\(currentPhase)', 'beforeEach' may only be used inside 'context' or 'describe'.")
   56|      4|        }
   57|      4|        currentExampleGroup.hooks.appendBefore(closure)
   58|      4|    }
   59|       |
   60|       |#if canImport(Darwin)
   61|       |    @objc(beforeEachWithMetadata:)
   62|      0|    internal func beforeEach(closure: @escaping BeforeExampleWithMetadataClosure) {
   63|      0|        currentExampleGroup.hooks.appendBefore(closure)
   64|      0|    }
   65|       |#else
   66|       |    internal func beforeEach(closure: @escaping BeforeExampleWithMetadataClosure) {
   67|       |        currentExampleGroup.hooks.appendBefore(closure)
   68|       |    }
   69|       |#endif
   70|       |
   71|      0|    internal func afterEach(_ closure: @escaping AfterExampleClosure) {
   72|      0|        guard currentExampleMetadata == nil else {
   73|      0|            raiseError("'afterEach' cannot be used inside '\(currentPhase)', 'afterEach' may only be used inside 'context' or 'describe'.")
   74|      0|        }
   75|      0|        currentExampleGroup.hooks.appendAfter(closure)
   76|      0|    }
   77|       |
   78|       |#if canImport(Darwin)
   79|       |    @objc(afterEachWithMetadata:)
   80|      0|    internal func afterEach(closure: @escaping AfterExampleWithMetadataClosure) {
   81|      0|        currentExampleGroup.hooks.appendAfter(closure)
   82|      0|    }
   83|       |#else
   84|       |    internal func afterEach(closure: @escaping AfterExampleWithMetadataClosure) {
   85|       |        currentExampleGroup.hooks.appendAfter(closure)
   86|       |    }
   87|       |#endif
   88|       |
   89|       |    @nonobjc
   90|      9|    internal func it(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () throws -> Void) {
   91|      9|        if beforesCurrentlyExecuting {
   92|      0|            raiseError("'it' cannot be used inside 'beforeEach', 'it' may only be used inside 'context' or 'describe'.")
   93|      9|        }
   94|      9|        if aftersCurrentlyExecuting {
   95|      0|            raiseError("'it' cannot be used inside 'afterEach', 'it' may only be used inside 'context' or 'describe'.")
   96|      9|        }
   97|      0|        guard currentExampleMetadata == nil else {
   98|      0|            raiseError("'it' cannot be used inside 'it', 'it' may only be used inside 'context' or 'describe'.")
   99|      9|        }
  100|      9|        let callsite = Callsite(file: file, line: line)
  101|      9|        let example = Example(description: description, callsite: callsite, flags: flags, closure: closure)
  102|      9|        currentExampleGroup.appendExample(example)
  103|      9|    }
  104|       |
  105|       |    @nonobjc
  106|      0|    internal func fit(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () throws -> Void) {
  107|      0|        var focusedFlags = flags
  108|      0|        focusedFlags[Filter.focused] = true
  109|      0|        self.it(description, flags: focusedFlags, file: file, line: line, closure: closure)
  110|      0|    }
  111|       |
  112|       |    @nonobjc
  113|      0|    internal func xit(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () throws -> Void) {
  114|      0|        var pendingFlags = flags
  115|      0|        pendingFlags[Filter.pending] = true
  116|      0|        self.it(description, flags: pendingFlags, file: file, line: line, closure: closure)
  117|      0|    }
  118|       |
  119|       |    @nonobjc
  120|      0|    internal func itBehavesLike(_ name: String, sharedExampleContext: @escaping SharedExampleContext, flags: FilterFlags, file: FileString, line: UInt) {
  121|      0|        guard currentExampleMetadata == nil else {
  122|      0|            raiseError("'itBehavesLike' cannot be used inside '\(currentPhase)', 'itBehavesLike' may only be used inside 'context' or 'describe'.")
  123|      0|        }
  124|      0|        let callsite = Callsite(file: file, line: line)
  125|      0|        let closure = World.sharedWorld.sharedExample(name)
  126|      0|
  127|      0|        let group = ExampleGroup(description: name, flags: flags)
  128|      0|        currentExampleGroup.appendExampleGroup(group)
  129|      0|        performWithCurrentExampleGroup(group) {
  130|      0|            closure(sharedExampleContext)
  131|      0|        }
  132|      0|
  133|      0|        group.walkDownExamples { (example: Example) in
  134|      0|            example.isSharedExample = true
  135|      0|            example.callsite = callsite
  136|      0|        }
  137|      0|    }
  138|       |
  139|       |    @nonobjc
  140|      0|    internal func fitBehavesLike(_ name: String, sharedExampleContext: @escaping SharedExampleContext, flags: FilterFlags, file: FileString, line: UInt) {
  141|      0|        var focusedFlags = flags
  142|      0|        focusedFlags[Filter.focused] = true
  143|      0|        self.itBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: focusedFlags, file: file, line: line)
  144|      0|    }
  145|       |
  146|      0|    internal func itBehavesLike<C>(_ behavior: Behavior<C>.Type, context: @escaping () -> C, flags: FilterFlags, file: FileString, line: UInt) {
  147|      0|        guard currentExampleMetadata == nil else {
  148|      0|            raiseError("'itBehavesLike' cannot be used inside '\(currentPhase)', 'itBehavesLike' may only be used inside 'context' or 'describe'.")
  149|      0|        }
  150|      0|        let callsite = Callsite(file: file, line: line)
  151|      0|        let closure = behavior.spec
  ------------------
  | Unexecuted instantiation: $s5Quick5WorldC13itBehavesLike_7context5flags4file4lineyAA8BehaviorCyxGm_xycSDySSSbGSSSutlFyxyccAKmcfu_
  ------------------
  | Unexecuted instantiation: $s5Quick5WorldC13itBehavesLike_7context5flags4file4lineyAA8BehaviorCyxGm_xycSDySSSbGSSSutlFyxyccAKmcfu_yxyccfu0_
  ------------------
  152|      0|        let group = ExampleGroup(description: behavior.name, flags: flags)
  153|      0|        currentExampleGroup.appendExampleGroup(group)
  154|      0|        performWithCurrentExampleGroup(group) {
  155|      0|            closure(context)
  156|      0|        }
  157|      0|
  158|      0|        group.walkDownExamples { (example: Example) in
  159|      0|            example.isSharedExample = true
  160|      0|            example.callsite = callsite
  161|      0|        }
  162|      0|    }
  163|       |
  164|      0|    internal func fitBehavesLike<C>(_ behavior: Behavior<C>.Type, context: @escaping () -> C, flags: FilterFlags, file: FileString, line: UInt) {
  165|      0|        var focusedFlags = flags
  166|      0|        focusedFlags[Filter.focused] = true
  167|      0|        self.itBehavesLike(behavior, context: context, flags: focusedFlags, file: file, line: line)
  168|      0|    }
  169|       |
  170|      0|    internal func xitBehavesLike<C>(_ behavior: Behavior<C>.Type, context: @escaping () -> C, flags: FilterFlags, file: FileString, line: UInt) {
  171|      0|        var pendingFlags = flags
  172|      0|        pendingFlags[Filter.pending] = true
  173|      0|        self.itBehavesLike(behavior, context: context, flags: pendingFlags, file: file, line: line)
  174|      0|    }
  175|       |
  176|       |#if canImport(Darwin) && !SWIFT_PACKAGE
  177|       |    @objc(itWithDescription:flags:file:line:closure:)
  178|      0|    internal func objc_it(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () -> Void) {
  179|      0|        it(description, flags: flags, file: file, line: line, closure: closure)
  180|      0|    }
  181|       |
  182|       |    @objc(fitWithDescription:flags:file:line:closure:)
  183|      0|    internal func objc_fit(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () -> Void) {
  184|      0|        fit(description, flags: flags, file: file, line: line, closure: closure)
  185|      0|    }
  186|       |
  187|       |    @objc(xitWithDescription:flags:file:line:closure:)
  188|      0|    internal func objc_xit(_ description: String, flags: FilterFlags, file: FileString, line: UInt, closure: @escaping () -> Void) {
  189|      0|        xit(description, flags: flags, file: file, line: line, closure: closure)
  190|      0|    }
  191|       |
  192|       |    @objc(itBehavesLikeSharedExampleNamed:sharedExampleContext:flags:file:line:)
  193|      0|    internal func objc_itBehavesLike(_ name: String, sharedExampleContext: @escaping SharedExampleContext, flags: FilterFlags, file: FileString, line: UInt) {
  194|      0|        itBehavesLike(name, sharedExampleContext: sharedExampleContext, flags: flags, file: file, line: line)
  195|      0|    }
  196|       |#endif
  197|       |
  198|      0|    internal func pending(_ description: String, closure: () -> Void) {
  199|      0|        print("Pending: \(description)")
  200|      0|    }
  201|       |
  202|      0|    private var currentPhase: String {
  203|      0|        if beforesCurrentlyExecuting {
  204|      0|            return "beforeEach"
  205|      0|        } else if aftersCurrentlyExecuting {
  206|      0|            return "afterEach"
  207|      0|        }
  208|      0|
  209|      0|        return "it"
  210|      0|    }
  211|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/ErrorUtility.swift:
    1|       |import Foundation
    2|       |
    3|      0|internal func raiseError(_ message: String) -> Never {
    4|      0|#if canImport(Darwin)
    5|      0|    NSException(name: .internalInconsistencyException, reason: message, userInfo: nil).raise()
    6|      0|#endif
    7|      0|
    8|      0|    // This won't be reached when ObjC is available and the exception above is raisd
    9|      0|    fatalError(message)
   10|      0|}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Example.swift:
    1|       |import Foundation
    2|       |
    3|       |#if canImport(Darwin)
    4|       |// swiftlint:disable type_name
    5|       |@objcMembers
    6|       |public class _ExampleBase: NSObject {}
    7|       |#else
    8|       |public class _ExampleBase: NSObject {}
    9|       |// swiftlint:enable type_name
   10|       |#endif
   11|       |
   12|       |/**
   13|       |    Examples, defined with the `it` function, use assertions to
   14|       |    demonstrate how code should behave. These are like "tests" in XCTest.
   15|       |*/
   16|       |final public class Example: _ExampleBase {
   17|       |    /**
   18|       |        A boolean indicating whether the example is a shared example;
   19|       |        i.e.: whether it is an example defined with `itBehavesLike`.
   20|       |    */
   21|       |    public var isSharedExample = false
   22|       |
   23|       |    /**
   24|       |        The site at which the example is defined.
   25|       |        This must be set correctly in order for Xcode to highlight
   26|       |        the correct line in red when reporting a failure.
   27|       |    */
   28|       |    public var callsite: Callsite
   29|       |
   30|       |    weak internal var group: ExampleGroup?
   31|       |
   32|       |    private let internalDescription: String
   33|       |    private let closure: () throws -> Void
   34|       |    private let flags: FilterFlags
   35|       |
   36|      9|    internal init(description: String, callsite: Callsite, flags: FilterFlags, closure: @escaping () throws -> Void) {
   37|      9|        self.internalDescription = description
   38|      9|        self.closure = closure
   39|      9|        self.callsite = callsite
   40|      9|        self.flags = flags
   41|      9|    }
   42|       |
   43|      9|    public override var description: String {
   44|      9|        return internalDescription
   45|      9|    }
   46|       |
   47|       |    /**
   48|       |        The example name. A name is a concatenation of the name of
   49|       |        the example group the example belongs to, followed by the
   50|       |        description of the example itself.
   51|       |
   52|       |        The example name is used to generate a test method selector
   53|       |        to be displayed in Xcode's test navigator.
   54|       |    */
   55|      9|    public var name: String {
   56|      9|        guard let groupName = group?.name else { return description }
   57|      9|        return "\(groupName), \(description)"
   58|      9|    }
   59|       |
   60|       |    /**
   61|       |        Executes the example closure, as well as all before and after
   62|       |        closures defined in the its surrounding example groups.
   63|       |    */
   64|      9|    public func run() { // swiftlint:disable:this function_body_length
   65|      9|        let world = World.sharedWorld
   66|      9|
   67|      9|        if world.numberOfExamplesRun == 0 {
   68|      1|            world.suiteHooks.executeBefores()
   69|      9|        }
   70|      9|
   71|      9|        let exampleMetadata = ExampleMetadata(example: self, exampleIndex: world.numberOfExamplesRun)
   72|      9|        world.currentExampleMetadata = exampleMetadata
   73|      9|        defer {
   74|      9|            world.currentExampleMetadata = nil
   75|      9|        }
   76|      9|
   77|      9|        world.exampleHooks.executeBefores(exampleMetadata)
   78|      9|        group!.phase = .beforesExecuting
   79|      8|        for before in group!.befores {
   80|      8|            before(exampleMetadata)
   81|      9|        }
   82|      9|        group!.phase = .beforesFinished
   83|      9|
   84|      9|        do {
   85|      9|            try closure()
   86|      0|        } catch {
   87|      0|            let description = "Test \(name) threw unexpected error: \(error.localizedDescription)"
   88|      0|            #if SWIFT_PACKAGE
   89|      0|            let file = callsite.file.description
   90|      0|            #else
   91|      0|            let file = callsite.file
   92|      0|            #endif
   93|      0|            #if swift(>=5.3) && !SWIFT_PACKAGE
   94|      0|            let location = XCTSourceCodeLocation(filePath: file, lineNumber: Int(callsite.line))
   95|      0|            let sourceCodeContext = XCTSourceCodeContext(location: location)
   96|      0|            let issue = XCTIssue(
   97|      0|                type: .thrownError,
   98|      0|                compactDescription: description,
   99|      0|                sourceCodeContext: sourceCodeContext
  100|      0|            )
  101|      0|            QuickSpec.current.record(issue)
  102|      0|            #else
  103|      0|            QuickSpec.current.recordFailure(
  104|      0|                withDescription: description,
  105|      0|                inFile: file,
  106|      0|                atLine: Int(callsite.line),
  107|      0|                expected: false
  108|      0|            )
  109|      0|            #endif
  110|      9|        }
  111|      9|
  112|      9|        group!.phase = .aftersExecuting
  113|      0|        for after in group!.afters {
  114|      0|            after(exampleMetadata)
  115|      9|        }
  116|      9|        group!.phase = .aftersFinished
  117|      9|        world.exampleHooks.executeAfters(exampleMetadata)
  118|      9|
  119|      9|        world.numberOfExamplesRun += 1
  120|      9|
  121|      9|        if !world.isRunningAdditionalSuites && world.numberOfExamplesRun >= world.cachedIncludedExampleCount {
  122|      1|            world.suiteHooks.executeAfters()
  123|      9|        }
  124|      9|    }
  125|       |
  126|       |    /**
  127|       |        Evaluates the filter flags set on this example and on the example groups
  128|       |        this example belongs to. Flags set on the example are trumped by flags on
  129|       |        the example group it belongs to. Flags on inner example groups are trumped
  130|       |        by flags on outer example groups.
  131|       |    */
  132|     36|    internal var filterFlags: FilterFlags {
  133|     36|        var aggregateFlags = flags
  134|      0|        for (key, value) in group!.filterFlags {
  135|      0|            aggregateFlags[key] = value
  136|     36|        }
  137|     36|        return aggregateFlags
  138|     36|    }
  139|       |}
  140|       |
  141|       |extension Example {
  142|       |    /**
  143|       |        Returns a boolean indicating whether two Example objects are equal.
  144|       |        If two examples are defined at the exact same callsite, they must be equal.
  145|       |    */
  146|      0|    @nonobjc public static func == (lhs: Example, rhs: Example) -> Bool {
  147|      0|        return lhs.callsite == rhs.callsite
  148|      0|    }
  149|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/ExampleGroup.swift:
    1|       |import Foundation
    2|       |
    3|       |/**
    4|       |    Example groups are logical groupings of examples, defined with
    5|       |    the `describe` and `context` functions. Example groups can share
    6|       |    setup and teardown code.
    7|       |*/
    8|       |final public class ExampleGroup: NSObject {
    9|       |    weak internal var parent: ExampleGroup?
   10|     16|    internal let hooks = ExampleHooks()
   11|       |
   12|     16|    internal var phase: HooksPhase = .nothingExecuted
   13|       |
   14|       |    private let internalDescription: String
   15|       |    private let flags: FilterFlags
   16|       |    private let isInternalRootExampleGroup: Bool
   17|     16|    private var childGroups = [ExampleGroup]()
   18|     16|    private var childExamples = [Example]()
   19|       |
   20|     16|    internal init(description: String, flags: FilterFlags, isInternalRootExampleGroup: Bool = false) {
   21|     16|        self.internalDescription = description
   22|     16|        self.flags = flags
   23|     16|        self.isInternalRootExampleGroup = isInternalRootExampleGroup
   24|     16|    }
   25|       |
   26|     25|    public override var description: String {
   27|     25|        return internalDescription
   28|     25|    }
   29|       |
   30|       |    /**
   31|       |        Returns a list of examples that belong to this example group,
   32|       |        or to any of its descendant example groups.
   33|       |    */
   34|       |    #if canImport(Darwin)
   35|       |    @objc
   36|     16|    public var examples: [Example] {
   37|     14|        return childExamples + childGroups.flatMap { $0.examples }
   38|     16|    }
   39|       |    #else
   40|       |    public var examples: [Example] {
   41|       |        return childExamples + childGroups.flatMap { $0.examples }
   42|       |    }
   43|       |    #endif
   44|       |
   45|     34|    internal var name: String? {
   46|      9|        guard let parent = parent else {
   47|      9|            return isInternalRootExampleGroup ? nil : description
   48|     25|        }
   49|     25|
   50|     16|        guard let name = parent.name else { return description }
   51|     16|        return "\(name), \(description)"
   52|     25|    }
   53|       |
   54|     36|    internal var filterFlags: FilterFlags {
   55|     36|        var aggregateFlags = flags
   56|    100|        walkUp { group in
   57|      0|            for (key, value) in group.flags {
   58|      0|                aggregateFlags[key] = value
   59|    100|            }
   60|    100|        }
   61|     36|        return aggregateFlags
   62|     36|    }
   63|       |
   64|      9|    internal var befores: [BeforeExampleWithMetadataClosure] {
   65|      9|        var closures = Array(hooks.befores.reversed())
   66|     25|        walkUp { group in
   67|     25|            closures.append(contentsOf: Array(group.hooks.befores.reversed()))
   68|     25|        }
   69|      9|        return Array(closures.reversed())
   70|      9|    }
   71|       |
   72|      9|    internal var afters: [AfterExampleWithMetadataClosure] {
   73|      9|        var closures = hooks.afters
   74|     25|        walkUp { group in
   75|     25|            closures.append(contentsOf: group.hooks.afters)
   76|     25|        }
   77|      9|        return closures
   78|      9|    }
   79|       |
   80|     46|    internal func walkDownExamples(_ callback: (_ example: Example) -> Void) {
   81|     27|        for example in childExamples {
   82|     27|            callback(example)
   83|     46|        }
   84|     42|        for group in childGroups {
   85|     42|            group.walkDownExamples(callback)
   86|     46|        }
   87|     46|    }
   88|       |
   89|     14|    internal func appendExampleGroup(_ group: ExampleGroup) {
   90|     14|        group.parent = self
   91|     14|        childGroups.append(group)
   92|     14|    }
   93|       |
   94|      9|    internal func appendExample(_ example: Example) {
   95|      9|        example.group = self
   96|      9|        childExamples.append(example)
   97|      9|    }
   98|       |
   99|     54|    private func walkUp(_ callback: (_ group: ExampleGroup) -> Void) {
  100|     54|        var group = self
  101|    150|        while let parent = group.parent {
  102|    150|            callback(parent)
  103|    150|            group = parent
  104|     54|        }
  105|     54|    }
  106|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/ExampleMetadata.swift:
    1|       |import Foundation
    2|       |
    3|       |#if canImport(Darwin)
    4|       |// swiftlint:disable type_name
    5|       |@objcMembers
    6|       |public class _ExampleMetadataBase: NSObject {}
    7|       |#else
    8|       |public class _ExampleMetadataBase: NSObject {}
    9|       |// swiftlint:enable type_name
   10|       |#endif
   11|       |
   12|       |/**
   13|       |    A class that encapsulates information about an example,
   14|       |    including the index at which the example was executed, as
   15|       |    well as the example itself.
   16|       |*/
   17|       |final public class ExampleMetadata: _ExampleMetadataBase {
   18|       |    /**
   19|       |        The example for which this metadata was collected.
   20|       |    */
   21|       |    public let example: Example
   22|       |
   23|       |    /**
   24|       |        The index at which this example was executed in the
   25|       |        test suite.
   26|       |    */
   27|       |    public let exampleIndex: Int
   28|       |
   29|      9|    internal init(example: Example, exampleIndex: Int) {
   30|      9|        self.example = example
   31|      9|        self.exampleIndex = exampleIndex
   32|      9|    }
   33|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Filter.swift:
    1|       |import Foundation
    2|       |
    3|       |#if canImport(Darwin)
    4|       |// swiftlint:disable type_name
    5|       |@objcMembers
    6|       |public class _FilterBase: NSObject {}
    7|       |#else
    8|       |public class _FilterBase: NSObject {}
    9|       |// swiftlint:enable type_name
   10|       |#endif
   11|       |
   12|       |/**
   13|       |    A mapping of string keys to booleans that can be used to
   14|       |    filter examples or example groups. For example, a "focused"
   15|       |    example would have the flags [Focused: true].
   16|       |*/
   17|       |public typealias FilterFlags = [String: Bool]
   18|       |
   19|       |/**
   20|       |    A namespace for filter flag keys, defined primarily to make the
   21|       |    keys available in Objective-C.
   22|       |*/
   23|       |final public class Filter: _FilterBase {
   24|       |    /**
   25|       |        Example and example groups with [Focused: true] are included in test runs,
   26|       |        excluding all other examples without this flag. Use this to only run one or
   27|       |        two tests that you're currently focusing on.
   28|       |    */
   29|     27|    public class var focused: String {
   30|     27|        return "focused"
   31|     27|    }
   32|       |
   33|       |    /**
   34|       |        Example and example groups with [Pending: true] are excluded from test runs.
   35|       |        Use this to temporarily suspend examples that you know do not pass yet.
   36|       |    */
   37|      9|    public class var pending: String {
   38|      9|        return "pending"
   39|      9|    }
   40|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Hooks/ExampleHooks.swift:
    1|       |/**
    2|       |    A container for closures to be executed before and after each example.
    3|       |*/
    4|       |final internal class ExampleHooks {
    5|     17|    internal var befores: [BeforeExampleWithMetadataClosure] = []
    6|     17|    internal var afters: [AfterExampleWithMetadataClosure] = []
    7|     17|    internal var phase: HooksPhase = .nothingExecuted
    8|       |
    9|      0|    internal func appendBefore(_ closure: @escaping BeforeExampleWithMetadataClosure) {
   10|      0|        befores.append(closure)
   11|      0|    }
   12|       |
   13|      4|    internal func appendBefore(_ closure: @escaping BeforeExampleClosure) {
   14|      8|        befores.append { (_: ExampleMetadata) in closure() }
   15|      4|    }
   16|       |
   17|      0|    internal func appendAfter(_ closure: @escaping AfterExampleWithMetadataClosure) {
   18|      0|        afters.append(closure)
   19|      0|    }
   20|       |
   21|      0|    internal func appendAfter(_ closure: @escaping AfterExampleClosure) {
   22|      0|        afters.append { (_: ExampleMetadata) in closure() }
   23|      0|    }
   24|       |
   25|      9|    internal func executeBefores(_ exampleMetadata: ExampleMetadata) {
   26|      9|        phase = .beforesExecuting
   27|      0|        for before in befores {
   28|      0|            before(exampleMetadata)
   29|      9|        }
   30|      9|
   31|      9|        phase = .beforesFinished
   32|      9|    }
   33|       |
   34|      9|    internal func executeAfters(_ exampleMetadata: ExampleMetadata) {
   35|      9|        phase = .aftersExecuting
   36|      0|        for after in afters {
   37|      0|            after(exampleMetadata)
   38|      9|        }
   39|      9|
   40|      9|        phase = .aftersFinished
   41|      9|    }
   42|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/Hooks/SuiteHooks.swift:
    1|       |/**
    2|       |    A container for closures to be executed before and after all examples.
    3|       |*/
    4|       |final internal class SuiteHooks {
    5|      1|    internal var befores: [BeforeSuiteClosure] = []
    6|      1|    internal var afters: [AfterSuiteClosure] = []
    7|      1|    internal var phase: HooksPhase = .nothingExecuted
    8|       |
    9|      0|    internal func appendBefore(_ closure: @escaping BeforeSuiteClosure) {
   10|      0|        befores.append(closure)
   11|      0|    }
   12|       |
   13|      0|    internal func appendAfter(_ closure: @escaping AfterSuiteClosure) {
   14|      0|        afters.append(closure)
   15|      0|    }
   16|       |
   17|      1|    internal func executeBefores() {
   18|      1|        phase = .beforesExecuting
   19|      0|        for before in befores {
   20|      0|            before()
   21|      1|        }
   22|      1|        phase = .beforesFinished
   23|      1|    }
   24|       |
   25|      1|    internal func executeAfters() {
   26|      1|        phase = .aftersExecuting
   27|      0|        for after in afters {
   28|      0|            after()
   29|      1|        }
   30|      1|        phase = .aftersFinished
   31|      1|    }
   32|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/NSBundle+CurrentTestBundle.swift:
    1|       |#if canImport(Darwin)
    2|       |
    3|       |import Foundation
    4|       |
    5|       |extension Bundle {
    6|       |
    7|       |    /**
    8|       |     Locates the first bundle with a '.xctest' file extension.
    9|       |     */
   10|      0|    internal static var currentTestBundle: Bundle? {
   11|      0|        return allBundles.first { $0.bundlePath.hasSuffix(".xctest") }
   12|      0|    }
   13|       |
   14|       |    /**
   15|       |     Return the module name of the bundle.
   16|       |     Uses the bundle filename and transform it to match Xcode's transformation.
   17|       |     Module name has to be a valid "C99 extended identifier".
   18|       |     */
   19|      0|    internal var moduleName: String {
   20|      0|        let fileName = bundleURL.fileName
   21|      0|        return fileName.c99ExtendedIdentifier
   22|      0|    }
   23|       |}
   24|       |
   25|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/QuickSelectedTestSuiteBuilder.swift:
    1|       |#if canImport(Darwin)
    2|       |import Foundation
    3|       |
    4|       |/**
    5|       | Responsible for building a "Selected tests" suite. This corresponds to a single
    6|       | spec, and all its examples.
    7|       | */
    8|       |internal class QuickSelectedTestSuiteBuilder: QuickTestSuiteBuilder {
    9|       |
   10|       |    /**
   11|       |     The test spec class to run.
   12|       |     */
   13|       |    let testCaseClass: AnyClass!
   14|       |
   15|       |    /**
   16|       |     For Objective-C classes, returns the class name. For Swift classes without,
   17|       |     an explicit Objective-C name, returns a module-namespaced class name
   18|       |     (e.g., "FooTests.FooSpec").
   19|       |     */
   20|      0|    var testSuiteClassName: String {
   21|      0|        return NSStringFromClass(testCaseClass)
   22|      0|    }
   23|       |
   24|       |    /**
   25|       |     Given a test case name:
   26|       |
   27|       |        FooSpec/testFoo
   28|       |
   29|       |     Optionally constructs a test suite builder for the named test case class
   30|       |     in the running test bundle.
   31|       |
   32|       |     If no test bundle can be found, or the test case class can't be found,
   33|       |     initialization fails and returns `nil`.
   34|       |     */
   35|      0|    init?(forTestCaseWithName name: String) {
   36|      0|        guard let testCaseClass = testCaseClassForTestCaseWithName(name) else {
   37|      0|            self.testCaseClass = nil
   38|      0|            return nil
   39|      0|        }
   40|      0|
   41|      0|        self.testCaseClass = testCaseClass
   42|      0|    }
   43|       |
   44|       |    /**
   45|       |     Returns a `QuickTestSuite` that runs the associated test case class.
   46|       |     */
   47|      0|    func buildTestSuite() -> QuickTestSuite {
   48|      0|        return QuickTestSuite(forTestCaseClass: testCaseClass)
   49|      0|    }
   50|       |
   51|       |}
   52|       |
   53|       |/**
   54|       | Searches `Bundle.allBundles()` for an xctest bundle, then looks up the named
   55|       | test case class in that bundle.
   56|       |
   57|       | Returns `nil` if a bundle or test case class cannot be found.
   58|       | */
   59|      0|private func testCaseClassForTestCaseWithName(_ name: String) -> AnyClass? {
   60|      0|    func extractClassName(_ name: String) -> String? {
   61|      0|        return name.components(separatedBy: "/").first
   62|      0|    }
   63|      0|
   64|      0|    guard let className = extractClassName(name) else { return nil }
   65|      0|    guard let bundle = Bundle.currentTestBundle else { return nil }
   66|      0|
   67|      0|    if let testCaseClass = bundle.classNamed(className) { return testCaseClass }
   68|      0|
   69|      0|    let moduleName = bundle.moduleName
   70|      0|
   71|      0|    return NSClassFromString("\(moduleName).\(className)")
   72|      0|}
   73|       |
   74|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/QuickTestObservation.swift:
    1|       |#if !SWIFT_PACKAGE
    2|       |
    3|       |import Foundation
    4|       |import XCTest
    5|       |
    6|       |/// A dummy protocol for calling the internal `+[QuickSpec buildExamplesIfNeeded]` method
    7|       |/// which is defined in Objective-C from Swift.
    8|       |@objc internal protocol _QuickSpecInternal {
    9|       |    static func buildExamplesIfNeeded()
   10|       |}
   11|       |
   12|       |@objc internal final class QuickTestObservation: NSObject, XCTestObservation {
   13|       |    @objc(sharedInstance)
   14|       |    static let shared = QuickTestObservation()
   15|       |
   16|       |    // Quick hooks into this event to compile example groups for each QuickSpec subclasses.
   17|       |    //
   18|       |    // If an exception occurs when compiling examples, report it to the user. Chances are they
   19|       |    // included an expectation outside of a "it", "describe", or "context" block.
   20|      1|    func testBundleWillStart(_ testBundle: Bundle) {
   21|      1|        QuickSpec.enumerateSubclasses { specClass in
   22|      1|            // This relies on `_QuickSpecInternal`.
   23|      1|            (specClass as AnyClass).buildExamplesIfNeeded()
   24|      1|        }
   25|      1|    }
   26|       |}
   27|       |
   28|       |// swiftlint:disable:next todo
   29|       |// TODO: Unify this with QuickConfiguration's equivalent
   30|       |extension QuickSpec {
   31|       |    internal static func enumerateSubclasses(
   32|       |        subclasses: [QuickSpec.Type]? = nil,
   33|       |        _ block: (QuickSpec.Type) -> Void
   34|      1|    ) {
   35|      1|        let subjects: [QuickSpec.Type]
   36|      0|        if let subclasses = subclasses {
   37|      0|            subjects = subclasses
   38|      1|        } else {
   39|      1|            let classesCount = objc_getClassList(nil, 0)
   40|      1|
   41|      0|            guard classesCount > 0 else {
   42|      0|                return
   43|      1|            }
   44|      1|
   45|      1|            let classes = UnsafeMutablePointer<AnyClass?>.allocate(capacity: Int(classesCount))
   46|      1|            defer { free(classes) }
   47|      1|
   48|      1|            objc_getClassList(AutoreleasingUnsafeMutablePointer(classes), classesCount)
   49|      1|
   50|      1|            var specSubclasses: [QuickSpec.Type] = []
   51|  33.0k|            for index in 0..<classesCount {
   52|  33.0k|                guard
   53|  33.0k|                    let subclass = classes[Int(index)],
   54|  33.0k|                    let superclass = class_getSuperclass(subclass),
   55|  33.0k|                    superclass is QuickSpec.Type
   56|  33.0k|                    else { continue }
   57|      1|
   58|      1|                // swiftlint:disable:next force_cast
   59|      1|                specSubclasses.append(subclass as! QuickSpec.Type)
   60|      1|            }
   61|      1|
   62|      1|            subjects = specSubclasses
   63|      1|        }
   64|      1|
   65|      1|        subjects.forEach(block)
   66|      1|    }
   67|       |}
   68|       |
   69|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/QuickTestSuite.swift:
    1|       |#if canImport(Darwin)
    2|       |
    3|       |import XCTest
    4|       |
    5|       |/**
    6|       | This protocol defines the role of an object that builds test suites.
    7|       | */
    8|       |internal protocol QuickTestSuiteBuilder {
    9|       |
   10|       |    /**
   11|       |     Construct a `QuickTestSuite` instance with the appropriate test cases added as tests.
   12|       |
   13|       |     Subsequent calls to this method should return equivalent test suites.
   14|       |     */
   15|       |    func buildTestSuite() -> QuickTestSuite
   16|       |
   17|       |}
   18|       |
   19|       |/**
   20|       | A base class for a class cluster of Quick test suites, that should correctly
   21|       | build dynamic test suites for XCTest to execute.
   22|       | */
   23|       |public class QuickTestSuite: XCTestSuite {
   24|       |
   25|       |    private static var builtTestSuites: Set<String> = Set()
   26|       |
   27|       |    /**
   28|       |     Construct a test suite for a specific, selected subset of test cases (rather
   29|       |     than the default, which as all test cases).
   30|       |
   31|       |     If this method is called multiple times for the same test case class, e.g..
   32|       |
   33|       |        FooSpec/testFoo
   34|       |        FooSpec/testBar
   35|       |
   36|       |     It is expected that the first call should return a valid test suite, and
   37|       |     all subsequent calls should return `nil`.
   38|       |     */
   39|       |    @objc
   40|      0|    public static func selectedTestSuite(forTestCaseWithName name: String) -> QuickTestSuite? {
   41|      0|        guard let builder = QuickSelectedTestSuiteBuilder(forTestCaseWithName: name) else { return nil }
   42|      0|
   43|      0|        let (inserted, _) = builtTestSuites.insert(builder.testSuiteClassName)
   44|      0|        if inserted {
   45|      0|            return builder.buildTestSuite()
   46|      0|        } else {
   47|      0|            return nil
   48|      0|        }
   49|      0|    }
   50|       |}
   51|       |
   52|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/String+C99ExtendedIdentifier.swift:
    1|       |#if canImport(Darwin)
    2|       |import Foundation
    3|       |
    4|       |extension String {
    5|      1|    private static var invalidCharacters: CharacterSet = {
    6|      1|        var invalidCharacters = CharacterSet()
    7|      1|
    8|      1|        let invalidCharacterSets: [CharacterSet] = [
    9|      1|            .whitespacesAndNewlines,
   10|      1|            .illegalCharacters,
   11|      1|            .controlCharacters,
   12|      1|            .punctuationCharacters,
   13|      1|            .nonBaseCharacters,
   14|      1|            .symbols,
   15|      1|        ]
   16|      1|
   17|      6|        for invalidSet in invalidCharacterSets {
   18|      6|            invalidCharacters.formUnion(invalidSet)
   19|      1|        }
   20|      1|
   21|      1|        return invalidCharacters
   22|      1|    }()
   23|       |
   24|      9|    internal var c99ExtendedIdentifier: String {
   25|      9|        let validComponents = components(separatedBy: String.invalidCharacters)
   26|      9|        let result = validComponents.joined(separator: "_")
   27|      9|
   28|      9|        return result.isEmpty ? "_" : result
   29|      9|    }
   30|       |}
   31|       |
   32|       |/// Extension methods or properties for NSObject subclasses are invisible from
   33|       |/// the Objective-C runtime on static linking unless the consumers add `-ObjC`
   34|       |/// linker flag, so let's make a wrapper class to mitigate that situation.
   35|       |///
   36|       |/// See: https://github.com/Quick/Quick/issues/785 and https://github.com/Quick/Quick/pull/803
   37|       |@objc
   38|       |class QCKObjCStringUtils: NSObject {
   39|      0|    override private init() {}
   40|       |
   41|       |    @objc
   42|      9|    static func c99ExtendedIdentifier(from string: String) -> String {
   43|      9|        return string.c99ExtendedIdentifier
   44|      9|    }
   45|       |}
   46|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/URL+FileName.swift:
    1|       |import Foundation
    2|       |
    3|       |extension URL {
    4|       |
    5|       |    /**
    6|       |     Returns the path file name without file extension.
    7|       |     */
    8|      0|    var fileName: String {
    9|      0|        return self.deletingPathExtension().lastPathComponent
   10|      0|    }
   11|       |
   12|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/Quick/World.swift:
    1|       |import Foundation
    2|       |
    3|       |/**
    4|       |    A closure that, when evaluated, returns a dictionary of key-value
    5|       |    pairs that can be accessed from within a group of shared examples.
    6|       |*/
    7|       |public typealias SharedExampleContext = () -> [String: Any]
    8|       |
    9|       |/**
   10|       |    A closure that is used to define a group of shared examples. This
   11|       |    closure may contain any number of example and example groups.
   12|       |*/
   13|       |public typealias SharedExampleClosure = (@escaping SharedExampleContext) -> Void
   14|       |
   15|       |#if canImport(Darwin)
   16|       |// swiftlint:disable type_name
   17|       |@objcMembers
   18|       |internal class _WorldBase: NSObject {}
   19|       |#else
   20|       |internal class _WorldBase: NSObject {}
   21|       |// swiftlint:enable type_name
   22|       |#endif
   23|       |
   24|       |/**
   25|       |    A collection of state Quick builds up in order to work its magic.
   26|       |    World is primarily responsible for maintaining a mapping of QuickSpec
   27|       |    classes to root example groups for those classes.
   28|       |
   29|       |    It also maintains a mapping of shared example names to shared
   30|       |    example closures.
   31|       |
   32|       |    You may configure how Quick behaves by calling the -[World configure:]
   33|       |    method from within an overridden +[QuickConfiguration configure:] method.
   34|       |*/
   35|       |final internal class World: _WorldBase {
   36|       |    /**
   37|       |        The example group that is currently being run.
   38|       |        The DSL requires that this group is correctly set in order to build a
   39|       |        correct hierarchy of example groups and their examples.
   40|       |    */
   41|       |    internal var currentExampleGroup: ExampleGroup!
   42|       |
   43|       |    /**
   44|       |        The example metadata of the test that is currently being run.
   45|       |        This is useful for using the Quick test metadata (like its name) at
   46|       |        runtime.
   47|       |    */
   48|       |
   49|       |    internal var currentExampleMetadata: ExampleMetadata?
   50|       |
   51|       |    internal var numberOfExamplesRun = 0
   52|       |
   53|       |    /**
   54|       |        A flag that indicates whether additional test suites are being run
   55|       |        within this test suite. This is only true within the context of Quick
   56|       |        functional tests.
   57|       |    */
   58|       |#if canImport(Darwin)
   59|       |    // Convention of generating Objective-C selector has been changed on Swift 3
   60|       |    @objc(isRunningAdditionalSuites)
   61|       |    internal var isRunningAdditionalSuites = false
   62|       |#else
   63|       |    internal var isRunningAdditionalSuites = false
   64|       |#endif
   65|       |
   66|      1|    private var specs: [String: ExampleGroup] = [:]
   67|      1|    private var sharedExamples: [String: SharedExampleClosure] = [:]
   68|      1|    private let configuration = Configuration()
   69|       |
   70|       |    internal private(set) var isConfigurationFinalized = false
   71|       |
   72|     36|    internal var exampleHooks: ExampleHooks {return configuration.exampleHooks }
   73|     20|    internal var suiteHooks: SuiteHooks { return configuration.suiteHooks }
   74|       |
   75|       |    // MARK: Singleton Constructor
   76|       |
   77|      1|    private override init() {}
   78|       |
   79|       |    static private(set) var sharedWorld = World()
   80|       |
   81|      0|    static func anotherWorld<T>(block: (World) -> T) -> T {
   82|      0|        let previous = sharedWorld
   83|      0|        defer { sharedWorld = previous }
   84|      0|
   85|      0|        let newWorld = World()
   86|      0|        sharedWorld = newWorld
   87|      0|        return block(newWorld)
   88|      0|    }
   89|       |
   90|       |    // MARK: Public Interface
   91|       |
   92|       |    /**
   93|       |        Exposes the World's Configuration object within the scope of the closure
   94|       |        so that it may be configured. This method must not be called outside of
   95|       |        an overridden +[QuickConfiguration configure:] method.
   96|       |
   97|       |        - parameter closure:  A closure that takes a Configuration object that can
   98|       |                         be mutated to change Quick's behavior.
   99|       |    */
  100|      1|    internal func configure(_ closure: QuickConfigurer) {
  101|      1|        assert(
  102|      1|            !isConfigurationFinalized,
  103|      1|            // swiftlint:disable:next line_length
  104|      0|            "Quick cannot be configured outside of a +[QuickConfiguration configure:] method. You should not call -[World configure:] directly. Instead, subclass QuickConfiguration and override the +[QuickConfiguration configure:] method."
  105|      1|        )
  106|      1|        closure(configuration)
  107|      1|    }
  108|       |
  109|       |    /**
  110|       |        Finalizes the World's configuration.
  111|       |        Any subsequent calls to World.configure() will raise.
  112|       |    */
  113|      1|    internal func finalizeConfiguration() {
  114|      1|        isConfigurationFinalized = true
  115|      1|    }
  116|       |
  117|       |    /**
  118|       |     Returns `true` if the root example group for the given spec class has been already initialized.
  119|       |
  120|       |     - parameter specClass: The QuickSpec class for which is checked for the existing root example group.
  121|       |     - returns: Whether the root example group for the given spec class has been already initialized or not.
  122|       |     */
  123|      1|    internal func isRootExampleGroupInitialized(forSpecClass specClass: QuickSpec.Type) -> Bool {
  124|      1|        let name = String(describing: specClass)
  125|      1|        return specs.keys.contains(name)
  126|      1|    }
  127|       |
  128|       |    /**
  129|       |        Returns an internally constructed root example group for the given
  130|       |        QuickSpec class.
  131|       |
  132|       |        A root example group with the description "root example group" is lazily
  133|       |        initialized for each QuickSpec class. This root example group wraps the
  134|       |        top level of a -[QuickSpec spec] method--it's thanks to this group that
  135|       |        users can define beforeEach and it closures at the top level, like so:
  136|       |
  137|       |            override func spec() {
  138|       |                // These belong to the root example group
  139|       |                beforeEach {}
  140|       |                it("is at the top level") {}
  141|       |            }
  142|       |
  143|       |        - parameter specClass: The QuickSpec class for which to retrieve the root example group.
  144|       |        - returns: The root example group for the class.
  145|       |    */
  146|      3|    internal func rootExampleGroup(forSpecClass specClass: QuickSpec.Type) -> ExampleGroup {
  147|      3|        let name = String(describing: specClass)
  148|      3|
  149|      1|        if let group = specs[name] {
  150|      1|            return group
  151|      2|        } else {
  152|      2|            let group = ExampleGroup(
  153|      2|                description: "root example group",
  154|      2|                flags: [:],
  155|      2|                isInternalRootExampleGroup: true
  156|      2|            )
  157|      2|            specs[name] = group
  158|      2|            return group
  159|      0|        }
  160|      0|    }
  161|       |
  162|       |    /**
  163|       |        Returns all examples that should be run for a given spec class.
  164|       |        There are two filtering passes that occur when determining which examples should be run.
  165|       |        That is, these examples are the ones that are included by inclusion filters, and are
  166|       |        not excluded by exclusion filters.
  167|       |
  168|       |        - parameter specClass: The QuickSpec subclass for which examples are to be returned.
  169|       |        - returns: A list of examples to be run as test invocations.
  170|       |    */
  171|      2|    internal func examples(forSpecClass specClass: QuickSpec.Type) -> [Example] {
  172|      2|        // 1. Grab all included examples.
  173|      2|        let included = includedExamples
  174|      2|        // 2. Grab the intersection of (a) examples for this spec, and (b) included examples.
  175|      9|        let spec = rootExampleGroup(forSpecClass: specClass).examples.filter { included.contains($0) }
  176|      2|        // 3. Remove all excluded examples.
  177|      9|        return spec.filter { example in
  178|      9|            !self.configuration.exclusionFilters.contains { $0(example) }
  179|      9|        }
  180|      2|    }
  181|       |
  182|       |    // MARK: Internal
  183|       |
  184|      0|    internal func registerSharedExample(_ name: String, closure: @escaping SharedExampleClosure) {
  185|      0|        raiseIfSharedExampleAlreadyRegistered(name)
  186|      0|        sharedExamples[name] = closure
  187|      0|    }
  188|       |
  189|      0|    internal func sharedExample(_ name: String) -> SharedExampleClosure {
  190|      0|        raiseIfSharedExampleNotRegistered(name)
  191|      0|        return sharedExamples[name]!
  192|      0|    }
  193|       |
  194|      1|    internal var includedExampleCount: Int {
  195|      1|        return includedExamples.count
  196|      1|    }
  197|       |
  198|       |    internal lazy var cachedIncludedExampleCount: Int = self.includedExampleCount
  199|       |
  200|      9|    internal var beforesCurrentlyExecuting: Bool {
  201|      9|        let suiteBeforesExecuting = suiteHooks.phase == .beforesExecuting
  202|      9|        let exampleBeforesExecuting = exampleHooks.phase == .beforesExecuting
  203|      9|        var groupBeforesExecuting = false
  204|      0|        if let runningExampleGroup = currentExampleMetadata?.example.group {
  205|      0|            groupBeforesExecuting = runningExampleGroup.phase == .beforesExecuting
  206|      9|        }
  207|      9|
  208|      9|        return suiteBeforesExecuting || exampleBeforesExecuting || groupBeforesExecuting
  209|      9|    }
  210|       |
  211|      9|    internal var aftersCurrentlyExecuting: Bool {
  212|      9|        let suiteAftersExecuting = suiteHooks.phase == .aftersExecuting
  213|      9|        let exampleAftersExecuting = exampleHooks.phase == .aftersExecuting
  214|      9|        var groupAftersExecuting = false
  215|      0|        if let runningExampleGroup = currentExampleMetadata?.example.group {
  216|      0|            groupAftersExecuting = runningExampleGroup.phase == .aftersExecuting
  217|      9|        }
  218|      9|
  219|      9|        return suiteAftersExecuting || exampleAftersExecuting || groupAftersExecuting
  220|      9|    }
  221|       |
  222|     15|    internal func performWithCurrentExampleGroup(_ group: ExampleGroup, closure: () -> Void) {
  223|     15|        let previousExampleGroup = currentExampleGroup
  224|     15|        currentExampleGroup = group
  225|     15|
  226|     15|        closure()
  227|     15|
  228|     15|        currentExampleGroup = previousExampleGroup
  229|     15|    }
  230|       |
  231|      3|    private var allExamples: [Example] {
  232|      3|        var all: [Example] = []
  233|      4|        for (_, group) in specs {
  234|     27|            group.walkDownExamples { all.append($0) }
  235|      3|        }
  236|      3|        return all
  237|      3|    }
  238|       |
  239|      3|    private var includedExamples: [Example] {
  240|      3|        let all = allExamples
  241|     27|        let included = all.filter { example in
  242|     27|            return self.configuration.inclusionFilters.contains { $0(example) }
  243|     27|        }
  244|      3|
  245|      3|        if included.isEmpty && configuration.runAllWhenEverythingFiltered {
  246|      3|            return all
  247|      0|        } else {
  248|      0|            return included
  249|      0|        }
  250|      0|    }
  251|       |
  252|      0|    private func raiseIfSharedExampleAlreadyRegistered(_ name: String) {
  253|      0|        if sharedExamples[name] != nil {
  254|      0|            raiseError("A shared example named '\(name)' has already been registered.")
  255|      0|        }
  256|      0|    }
  257|       |
  258|      0|    private func raiseIfSharedExampleNotRegistered(_ name: String) {
  259|      0|        if sharedExamples[name] == nil {
  260|      0|            raiseError("No shared example named '\(name)' has been registered. Registered shared examples: '\(Array(sharedExamples.keys))'")
  261|      0|        }
  262|      0|    }
  263|       |}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjCRuntime/QuickSpecBase.m:
    1|       |#import "QuickSpecBase.h"
    2|       |
    3|       |#pragma mark - _QuickSpecBase
    4|       |
    5|       |@implementation _QuickSpecBase
    6|       |
    7|      0|- (instancetype)init {
    8|      0|    self = [super initWithInvocation: nil];
    9|      0|    return self;
   10|      0|}
   11|       |
   12|       |/**
   13|       | Invocations for each test method in the test case. QuickSpec overrides this method to define a
   14|       | new method for each example defined in +[QuickSpec spec].
   15|       |
   16|       | @return An array of invocations that execute the newly defined example methods.
   17|       | */
   18|      1|+ (NSArray<NSInvocation *> *)testInvocations {
   19|      1|    NSArray<NSString *> *selectors = [self _qck_testMethodSelectors];
   20|      1|    NSMutableArray<NSInvocation *> *invocations = [NSMutableArray arrayWithCapacity:selectors.count];
   21|       |
   22|      0|    for (NSString *selectorString in selectors) {
   23|      0|        SEL selector = NSSelectorFromString(selectorString);
   24|      0|        NSMethodSignature *signature = [self instanceMethodSignatureForSelector:selector];
   25|      0|        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
   26|      0|        invocation.selector = selector;
   27|       |
   28|      0|        [invocations addObject:invocation];
   29|      0|    }
   30|       |
   31|      1|    return invocations;
   32|      1|}
   33|       |
   34|      1|+ (NSArray<NSString *> *)_qck_testMethodSelectors {
   35|      1|    return @[];
   36|      1|}
   37|       |
   38|       |@end

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjectiveC/Configuration/QuickConfiguration.m:
    1|       |#import "QuickConfiguration.h"
    2|       |#import <objc/runtime.h>
    3|       |
    4|       |#if __has_include("Quick-Swift.h")
    5|       |#import "Quick-Swift.h"
    6|       |#else
    7|       |#import <Quick/Quick-Swift.h>
    8|       |#endif
    9|       |
   10|       |@implementation QuickConfiguration
   11|       |
   12|       |#pragma mark - Object Lifecycle
   13|       |
   14|       |/**
   15|       | QuickConfiguration is not meant to be instantiated; it merely provides a hook
   16|       | for users to configure how Quick behaves. Raise an exception if an instance of
   17|       | QuickConfiguration is created.
   18|       | */
   19|      0|- (instancetype)init {
   20|      0|    NSString *className = NSStringFromClass([self class]);
   21|      0|    NSString *selectorName = NSStringFromSelector(@selector(configure:));
   22|      0|    [NSException raise:NSInternalInconsistencyException
   23|      0|                format:@"%@ is not meant to be instantiated; "
   24|      0|     @"subclass %@ and override %@ to configure Quick.",
   25|      0|     className, className, selectorName];
   26|      0|    return nil;
   27|      0|}
   28|       |
   29|       |#pragma mark - NSObject Overrides
   30|       |
   31|       |/**
   32|       | Hook into when QuickConfiguration is initialized in the runtime in order to
   33|       | call +[QuickConfiguration configure:] on each of its subclasses.
   34|       | */
   35|      1|+ (void)initialize {
   36|       |    // Only enumerate over the subclasses of QuickConfiguration, not any of its subclasses.
   37|      1|    if ([self class] == [QuickConfiguration class]) {
   38|      1|        World *world = [World sharedWorld];
   39|      1|        [self configureSubclassesIfNeededWithWorld:world];
   40|      1|    }
   41|      1|}
   42|       |
   43|       |#pragma mark - Public Interface
   44|       |
   45|      0|+ (void)configure:(Configuration *)configuration { }
   46|       |
   47|       |@end

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjectiveC/DSL/QCKDSL.h:
    1|       |#import <Foundation/Foundation.h>
    2|       |
    3|       |@class ExampleMetadata;
    4|       |
    5|       |/**
    6|       | Provides a hook for Quick to be configured before any examples are run.
    7|       | Within this scope, override the +[QuickConfiguration configure:] method
    8|       | to set properties on a configuration object to customize Quick behavior.
    9|       | For details, see the documentation for Configuraiton.swift.
   10|       |
   11|       | @param name The name of the configuration class. Like any Objective-C
   12|       |             class name, this must be unique to the current runtime
   13|       |             environment.
   14|       | */
   15|       |#define QuickConfigurationBegin(name) \
   16|       |    @interface name : QuickConfiguration; @end \
   17|       |    @implementation name \
   18|       |
   19|       |
   20|       |/**
   21|       | Marks the end of a Quick configuration.
   22|       | Make sure you put this after `QuickConfigurationBegin`.
   23|       | */
   24|       |#define QuickConfigurationEnd \
   25|       |    @end \
   26|       |
   27|       |
   28|       |/**
   29|       | Defines a new QuickSpec. Define examples and example groups within the space
   30|       | between this and `QuickSpecEnd`.
   31|       |
   32|       | @param name The name of the spec class. Like any Objective-C class name, this
   33|       |             must be unique to the current runtime environment.
   34|       | */
   35|       |#define QuickSpecBegin(name) \
   36|       |    @interface name : QuickSpec; @end \
   37|       |    @implementation name \
   38|       |    - (void)spec { \
   39|       |
   40|       |
   41|       |/**
   42|       | Marks the end of a QuickSpec. Make sure you put this after `QuickSpecBegin`.
   43|       | */
   44|       |#define QuickSpecEnd \
   45|       |    } \
   46|       |    @end \
   47|       |
   48|       |typedef NSDictionary *(^QCKDSLSharedExampleContext)(void);
   49|       |typedef void (^QCKDSLSharedExampleBlock)(QCKDSLSharedExampleContext);
   50|       |typedef void (^QCKDSLEmptyBlock)(void);
   51|       |typedef void (^QCKDSLExampleMetadataBlock)(ExampleMetadata *exampleMetadata);
   52|       |
   53|       |#define QUICK_EXPORT FOUNDATION_EXPORT
   54|       |
   55|       |QUICK_EXPORT void qck_beforeSuite(QCKDSLEmptyBlock closure);
   56|       |QUICK_EXPORT void qck_afterSuite(QCKDSLEmptyBlock closure);
   57|       |QUICK_EXPORT void qck_sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure);
   58|       |QUICK_EXPORT void qck_describe(NSString *description, QCKDSLEmptyBlock closure);
   59|       |QUICK_EXPORT void qck_context(NSString *description, QCKDSLEmptyBlock closure);
   60|       |QUICK_EXPORT void qck_beforeEach(QCKDSLEmptyBlock closure);
   61|       |QUICK_EXPORT void qck_beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure);
   62|       |QUICK_EXPORT void qck_afterEach(QCKDSLEmptyBlock closure);
   63|       |QUICK_EXPORT void qck_afterEachWithMetadata(QCKDSLExampleMetadataBlock closure);
   64|       |QUICK_EXPORT void qck_pending(NSString *description, QCKDSLEmptyBlock closure);
   65|       |QUICK_EXPORT void qck_xdescribe(NSString *description, QCKDSLEmptyBlock closure);
   66|       |QUICK_EXPORT void qck_xcontext(NSString *description, QCKDSLEmptyBlock closure);
   67|       |QUICK_EXPORT void qck_fdescribe(NSString *description, QCKDSLEmptyBlock closure);
   68|       |QUICK_EXPORT void qck_fcontext(NSString *description, QCKDSLEmptyBlock closure);
   69|       |
   70|       |#ifndef QUICK_DISABLE_SHORT_SYNTAX
   71|       |/**
   72|       |    Defines a closure to be run prior to any examples in the test suite.
   73|       |    You may define an unlimited number of these closures, but there is no
   74|       |    guarantee as to the order in which they're run.
   75|       | 
   76|       |    If the test suite crashes before the first example is run, this closure
   77|       |    will not be executed.
   78|       | 
   79|       |    @param closure The closure to be run prior to any examples in the test suite.
   80|       | */
   81|      0|static inline void beforeSuite(QCKDSLEmptyBlock closure) {
   82|      0|    qck_beforeSuite(closure);
   83|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:beforeSuite
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:beforeSuite
  ------------------
  | Unexecuted instantiation: QuickSpec.m:beforeSuite
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:beforeSuite
  ------------------
   84|       |
   85|       |
   86|       |/**
   87|       |    Defines a closure to be run after all of the examples in the test suite.
   88|       |    You may define an unlimited number of these closures, but there is no
   89|       |    guarantee as to the order in which they're run.
   90|       |     
   91|       |    If the test suite crashes before all examples are run, this closure
   92|       |    will not be executed.
   93|       | 
   94|       |    @param closure The closure to be run after all of the examples in the test suite.
   95|       | */
   96|      0|static inline void afterSuite(QCKDSLEmptyBlock closure) {
   97|      0|    qck_afterSuite(closure);
   98|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:afterSuite
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:afterSuite
  ------------------
  | Unexecuted instantiation: QuickSpec.m:afterSuite
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:afterSuite
  ------------------
   99|       |
  100|       |/**
  101|       |    Defines a group of shared examples. These examples can be re-used in several locations
  102|       |    by using the `itBehavesLike` function.
  103|       | 
  104|       |    @param name The name of the shared example group. This must be unique across all shared example
  105|       |                groups defined in a test suite.
  106|       |    @param closure A closure containing the examples. This behaves just like an example group defined
  107|       |                   using `describe` or `context`--the closure may contain any number of `beforeEach`
  108|       |                   and `afterEach` closures, as well as any number of examples (defined using `it`).
  109|       | */
  110|      0|static inline void sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure) {
  111|      0|    qck_sharedExamples(name, closure);
  112|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:sharedExamples
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:sharedExamples
  ------------------
  | Unexecuted instantiation: QuickSpec.m:sharedExamples
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:sharedExamples
  ------------------
  113|       |
  114|       |/**
  115|       |    Defines an example group. Example groups are logical groupings of examples.
  116|       |    Example groups can share setup and teardown code.
  117|       | 
  118|       |    @param description An arbitrary string describing the example group.
  119|       |    @param closure A closure that can contain other examples.
  120|       | */
  121|      0|static inline void describe(NSString *description, QCKDSLEmptyBlock closure) {
  122|      0|    qck_describe(description, closure);
  123|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:describe
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:describe
  ------------------
  | Unexecuted instantiation: QuickSpec.m:describe
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:describe
  ------------------
  124|       |
  125|       |/**
  126|       |    Defines an example group. Equivalent to `describe`.
  127|       | */
  128|      0|static inline void context(NSString *description, QCKDSLEmptyBlock closure) {
  129|      0|    qck_context(description, closure);
  130|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:context
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:context
  ------------------
  | Unexecuted instantiation: QuickSpec.m:context
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:context
  ------------------
  131|       |
  132|       |/**
  133|       |    Defines a closure to be run prior to each example in the current example
  134|       |    group. This closure is not run for pending or otherwise disabled examples.
  135|       |    An example group may contain an unlimited number of beforeEach. They'll be
  136|       |    run in the order they're defined, but you shouldn't rely on that behavior.
  137|       | 
  138|       |    @param closure The closure to be run prior to each example.
  139|       | */
  140|      0|static inline void beforeEach(QCKDSLEmptyBlock closure) {
  141|      0|    qck_beforeEach(closure);
  142|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:beforeEach
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:beforeEach
  ------------------
  | Unexecuted instantiation: QuickSpec.m:beforeEach
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:beforeEach
  ------------------
  143|       |
  144|       |/**
  145|       |    Identical to QCKDSL.beforeEach, except the closure is provided with
  146|       |    metadata on the example that the closure is being run prior to.
  147|       | */
  148|      0|static inline void beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
  149|      0|    qck_beforeEachWithMetadata(closure);
  150|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:beforeEachWithMetadata
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:beforeEachWithMetadata
  ------------------
  | Unexecuted instantiation: QuickSpec.m:beforeEachWithMetadata
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:beforeEachWithMetadata
  ------------------
  151|       |
  152|       |/**
  153|       |    Defines a closure to be run after each example in the current example
  154|       |    group. This closure is not run for pending or otherwise disabled examples.
  155|       |    An example group may contain an unlimited number of afterEach. They'll be
  156|       |    run in the order they're defined, but you shouldn't rely on that behavior.
  157|       | 
  158|       |    @param closure The closure to be run after each example.
  159|       | */
  160|      0|static inline void afterEach(QCKDSLEmptyBlock closure) {
  161|      0|    qck_afterEach(closure);
  162|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:afterEach
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:afterEach
  ------------------
  | Unexecuted instantiation: QuickSpec.m:afterEach
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:afterEach
  ------------------
  163|       |
  164|       |/**
  165|       |    Identical to QCKDSL.afterEach, except the closure is provided with
  166|       |    metadata on the example that the closure is being run after.
  167|       | */
  168|      0|static inline void afterEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
  169|      0|    qck_afterEachWithMetadata(closure);
  170|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:afterEachWithMetadata
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:afterEachWithMetadata
  ------------------
  | Unexecuted instantiation: QuickSpec.m:afterEachWithMetadata
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:afterEachWithMetadata
  ------------------
  171|       |
  172|       |/**
  173|       |    Defines an example or example group that should not be executed. Use `pending` to temporarily disable
  174|       |    examples or groups that should not be run yet.
  175|       | 
  176|       |    @param description An arbitrary string describing the example or example group.
  177|       |    @param closure A closure that will not be evaluated.
  178|       | */
  179|      0|static inline void pending(NSString *description, QCKDSLEmptyBlock closure) {
  180|      0|    qck_pending(description, closure);
  181|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:pending
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:pending
  ------------------
  | Unexecuted instantiation: QuickSpec.m:pending
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:pending
  ------------------
  182|       |
  183|       |/**
  184|       |    Use this to quickly mark a `describe` block as pending.
  185|       |    This disables all examples within the block.
  186|       | */
  187|      0|static inline void xdescribe(NSString *description, QCKDSLEmptyBlock closure) {
  188|      0|    qck_xdescribe(description, closure);
  189|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:xdescribe
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:xdescribe
  ------------------
  | Unexecuted instantiation: QuickSpec.m:xdescribe
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:xdescribe
  ------------------
  190|       |
  191|       |/**
  192|       |    Use this to quickly mark a `context` block as pending.
  193|       |    This disables all examples within the block.
  194|       | */
  195|      0|static inline void xcontext(NSString *description, QCKDSLEmptyBlock closure) {
  196|      0|    qck_xcontext(description, closure);
  197|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:xcontext
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:xcontext
  ------------------
  | Unexecuted instantiation: QuickSpec.m:xcontext
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:xcontext
  ------------------
  198|       |
  199|       |/**
  200|       |    Use this to quickly focus a `describe` block, focusing the examples in the block.
  201|       |    If any examples in the test suite are focused, only those examples are executed.
  202|       |    This trumps any explicitly focused or unfocused examples within the block--they are all treated as focused.
  203|       | */
  204|      0|static inline void fdescribe(NSString *description, QCKDSLEmptyBlock closure) {
  205|      0|    qck_fdescribe(description, closure);
  206|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:fdescribe
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:fdescribe
  ------------------
  | Unexecuted instantiation: QuickSpec.m:fdescribe
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:fdescribe
  ------------------
  207|       |
  208|       |/**
  209|       |    Use this to quickly focus a `context` block. Equivalent to `fdescribe`.
  210|       | */
  211|      0|static inline void fcontext(NSString *description, QCKDSLEmptyBlock closure) {
  212|      0|    qck_fcontext(description, closure);
  213|      0|}
  ------------------
  | Unexecuted instantiation: QCKDSL.m:fcontext
  ------------------
  | Unexecuted instantiation: QuickConfiguration.m:fcontext
  ------------------
  | Unexecuted instantiation: QuickSpec.m:fcontext
  ------------------
  | Unexecuted instantiation: XCTestSuite+QuickTestSuiteBuilder.m:fcontext
  ------------------
  214|       |
  215|       |#define it qck_it
  216|       |#define xit qck_xit
  217|       |#define fit qck_fit
  218|       |#define itBehavesLike qck_itBehavesLike
  219|       |#define xitBehavesLike qck_xitBehavesLike
  220|       |#define fitBehavesLike qck_fitBehavesLike
  221|       |#endif
  222|       |
  223|       |#define qck_it qck_it_builder(@{}, @(__FILE__), __LINE__)
  224|       |#define qck_xit qck_it_builder(@{Filter.pending: @YES}, @(__FILE__), __LINE__)
  225|       |#define qck_fit qck_it_builder(@{Filter.focused: @YES}, @(__FILE__), __LINE__)
  226|       |#define qck_itBehavesLike qck_itBehavesLike_builder(@{}, @(__FILE__), __LINE__)
  227|       |#define qck_xitBehavesLike qck_itBehavesLike_builder(@{Filter.pending: @YES}, @(__FILE__), __LINE__)
  228|       |#define qck_fitBehavesLike qck_itBehavesLike_builder(@{Filter.focused: @YES}, @(__FILE__), __LINE__)
  229|       |
  230|       |typedef void (^QCKItBlock)(NSString *description, QCKDSLEmptyBlock closure);
  231|       |typedef void (^QCKItBehavesLikeBlock)(NSString *description, QCKDSLSharedExampleContext context);
  232|       |
  233|       |QUICK_EXPORT QCKItBlock qck_it_builder(NSDictionary *flags, NSString *file, NSUInteger line);
  234|       |QUICK_EXPORT QCKItBehavesLikeBlock qck_itBehavesLike_builder(NSDictionary *flags, NSString *file, NSUInteger line);

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjectiveC/DSL/QCKDSL.m:
    1|       |#import "QCKDSL.h"
    2|       |
    3|       |#if __has_include("Quick-Swift.h")
    4|       |#import "Quick-Swift.h"
    5|       |#else
    6|       |#import <Quick/Quick-Swift.h>
    7|       |#endif
    8|       |
    9|      0|void qck_beforeSuite(QCKDSLEmptyBlock closure) {
   10|      0|    [[World sharedWorld] beforeSuite:closure];
   11|      0|}
   12|       |
   13|      0|void qck_afterSuite(QCKDSLEmptyBlock closure) {
   14|      0|    [[World sharedWorld] afterSuite:closure];
   15|      0|}
   16|       |
   17|      0|void qck_sharedExamples(NSString *name, QCKDSLSharedExampleBlock closure) {
   18|      0|    [[World sharedWorld] sharedExamples:name closure:closure];
   19|      0|}
   20|       |
   21|      0|void qck_describe(NSString *description, QCKDSLEmptyBlock closure) {
   22|      0|    [[World sharedWorld] describe:description flags:@{} closure:closure];
   23|      0|}
   24|       |
   25|      0|void qck_context(NSString *description, QCKDSLEmptyBlock closure) {
   26|      0|    qck_describe(description, closure);
   27|      0|}
   28|       |
   29|      0|void qck_beforeEach(QCKDSLEmptyBlock closure) {
   30|      0|    [[World sharedWorld] beforeEach:closure];
   31|      0|}
   32|       |
   33|      0|void qck_beforeEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
   34|      0|    [[World sharedWorld] beforeEachWithMetadata:closure];
   35|      0|}
   36|       |
   37|      0|void qck_afterEach(QCKDSLEmptyBlock closure) {
   38|      0|    [[World sharedWorld] afterEach:closure];
   39|      0|}
   40|       |
   41|      0|void qck_afterEachWithMetadata(QCKDSLExampleMetadataBlock closure) {
   42|      0|    [[World sharedWorld] afterEachWithMetadata:closure];
   43|      0|}
   44|       |
   45|      0|QCKItBlock qck_it_builder(NSDictionary *flags, NSString *file, NSUInteger line) {
   46|      0|    return ^(NSString *description, QCKDSLEmptyBlock closure) {
   47|      0|        [[World sharedWorld] itWithDescription:description
   48|      0|                                         flags:flags
   49|      0|                                          file:file
   50|      0|                                          line:line
   51|      0|                                       closure:closure];
   52|      0|    };
   53|      0|}
   54|       |
   55|      0|QCKItBehavesLikeBlock qck_itBehavesLike_builder(NSDictionary *flags, NSString *file, NSUInteger line) {
   56|      0|    return ^(NSString *name, QCKDSLSharedExampleContext context) {
   57|      0|        [[World sharedWorld] itBehavesLikeSharedExampleNamed:name
   58|      0|                                        sharedExampleContext:context
   59|      0|                                                       flags:flags
   60|      0|                                                        file:file
   61|      0|                                                        line:line];
   62|      0|    };
   63|      0|}
   64|       |
   65|      0|void qck_pending(NSString *description, QCKDSLEmptyBlock closure) {
   66|      0|    [[World sharedWorld] pending:description closure:closure];
   67|      0|}
   68|       |
   69|      0|void qck_xdescribe(NSString *description, QCKDSLEmptyBlock closure) {
   70|      0|    [[World sharedWorld] xdescribe:description flags:@{} closure:closure];
   71|      0|}
   72|       |
   73|      0|void qck_xcontext(NSString *description, QCKDSLEmptyBlock closure) {
   74|      0|    qck_xdescribe(description, closure);
   75|      0|}
   76|       |
   77|      0|void qck_fdescribe(NSString *description, QCKDSLEmptyBlock closure) {
   78|      0|    [[World sharedWorld] fdescribe:description flags:@{} closure:closure];
   79|      0|}
   80|       |
   81|      0|void qck_fcontext(NSString *description, QCKDSLEmptyBlock closure) {
   82|      0|    qck_fdescribe(description, closure);
   83|      0|}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjectiveC/QuickSpec.m:
    1|       |#import "QuickSpec.h"
    2|       |#import "QuickConfiguration.h"
    3|       |
    4|       |#if __has_include("Quick-Swift.h")
    5|       |#import "Quick-Swift.h"
    6|       |#else
    7|       |#import <Quick/Quick-Swift.h>
    8|       |#endif
    9|       |
   10|       |static QuickSpec *currentSpec = nil;
   11|       |
   12|       |@interface QuickSpec ()
   13|       |@property (nonatomic, strong) Example *example;
   14|       |@end
   15|       |
   16|       |@implementation QuickSpec
   17|       |
   18|       |#pragma mark - XCTestCase Overrides
   19|       |
   20|       |/**
   21|       | Invocations for each test method in the test case. QuickSpec overrides this method to define a
   22|       | new method for each example defined in +[QuickSpec spec].
   23|       |
   24|       | @return An array of invocations that execute the newly defined example methods.
   25|       | */
   26|      2|+ (NSArray *)testInvocations {
   27|      2|    NSArray *examples = [[World sharedWorld] examplesForSpecClass:[self class]];
   28|      2|    NSMutableArray *invocations = [NSMutableArray arrayWithCapacity:[examples count]];
   29|       |    
   30|      2|    NSMutableSet<NSString*> *selectorNames = [NSMutableSet set];
   31|       |    
   32|      9|    for (Example *example in examples) {
   33|      9|        SEL selector = [self addInstanceMethodForExample:example classSelectorNames:selectorNames];
   34|       |
   35|      9|        NSMethodSignature *signature = [self instanceMethodSignatureForSelector:selector];
   36|      9|        NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
   37|      9|        invocation.selector = selector;
   38|       |
   39|      9|        [invocations addObject:invocation];
   40|      9|    }
   41|       |
   42|      2|    return invocations;
   43|      2|}
   44|       |
   45|       |#pragma mark - Public Interface
   46|       |
   47|      0|- (void)spec { }
   48|       |
   49|      0|+ (QuickSpec*) current {
   50|      0|    return currentSpec;
   51|      0|}
   52|       |
   53|       |#pragma mark - Internal Methods
   54|       |
   55|       |/**
   56|       | Runs the `spec` method and builds the examples for this class.
   57|       |
   58|       | It's safe to call this method multiple times. If the examples for the class have been built, invocation
   59|       | of this method has no effect.
   60|       | */
   61|      1|+ (void)buildExamplesIfNeeded {
   62|      1|    [QuickConfiguration class];
   63|      1|    World *world = [World sharedWorld];
   64|       |
   65|      1|    if ([world isRootExampleGroupInitializedForSpecClass:[self class]]) {
   66|       |        // The examples fot this subclass have been already built. Skipping.
   67|      0|        return;
   68|      0|    }
   69|       |
   70|      1|    ExampleGroup *rootExampleGroup = [world rootExampleGroupForSpecClass:[self class]];
   71|      1|    [world performWithCurrentExampleGroup:rootExampleGroup closure:^{
   72|      1|        QuickSpec *spec = [self new];
   73|       |
   74|      1|        @try {
   75|      1|            [spec spec];
   76|      1|        }
   77|      1|        @catch (NSException *exception) {
   78|      1|            [NSException raise:NSInternalInconsistencyException
   79|      1|                        format:@"An exception occurred when building Quick's example groups.\n"
   80|      1|             @"Some possible reasons this might happen include:\n\n"
   81|      1|             @"- An 'expect(...).to' expectation was evaluated outside of "
   82|      1|             @"an 'it', 'context', or 'describe' block\n"
   83|      1|             @"- 'sharedExamples' was called twice with the same name\n"
   84|      1|             @"- 'itBehavesLike' was called with a name that is not registered as a shared example\n\n"
   85|      1|             @"Here's the original exception: '%@', reason: '%@', userInfo: '%@'",
   86|      1|             exception.name, exception.reason, exception.userInfo];
   87|      1|        }
   88|      1|    }];
   89|      1|}
   90|       |
   91|       |/**
   92|       | QuickSpec uses this method to dynamically define a new instance method for the
   93|       | given example. The instance method runs the example, catching any exceptions.
   94|       | The exceptions are then reported as test failures.
   95|       |
   96|       | In order to report the correct file and line number, examples must raise exceptions
   97|       | containing following keys in their userInfo:
   98|       |
   99|       | - "SenTestFilenameKey": A String representing the file name
  100|       | - "SenTestLineNumberKey": An Int representing the line number
  101|       |
  102|       | These keys used to be used by SenTestingKit, and are still used by some testing tools
  103|       | in the wild. See: https://github.com/Quick/Quick/pull/41
  104|       |
  105|       | @return The selector of the newly defined instance method.
  106|       | */
  107|      9|+ (SEL)addInstanceMethodForExample:(Example *)example classSelectorNames:(NSMutableSet<NSString*> *)selectorNames {
  108|      9|    IMP implementation = imp_implementationWithBlock(^(QuickSpec *self){
  109|      9|        self.example = example;
  110|      9|        currentSpec = self;
  111|      9|        [example run];
  112|      9|    });
  113|       |
  114|      9|    const char *types = [[NSString stringWithFormat:@"%s%s%s", @encode(void), @encode(id), @encode(SEL)] UTF8String];
  115|       |
  116|      9|    NSString *originalName = [QCKObjCStringUtils c99ExtendedIdentifierFrom:example.name];
  117|      9|    NSString *selectorName = originalName;
  118|      9|    NSUInteger i = 2;
  119|       |    
  120|      9|    while ([selectorNames containsObject:selectorName]) {
  121|      0|        selectorName = [NSString stringWithFormat:@"%@_%tu", originalName, i++];
  122|      0|    }
  123|       |    
  124|      9|    [selectorNames addObject:selectorName];
  125|       |    
  126|      9|    SEL selector = NSSelectorFromString(selectorName);
  127|      9|    class_addMethod(self, selector, implementation, types);
  128|       |
  129|      9|    return selector;
  130|      9|}
  131|       |
  132|       |#pragma clang diagnostic push
  133|       |#pragma clang diagnostic ignored "-Wdeprecated-implementations"
  134|       |/**
  135|       | This method is used to record failures, whether they represent example
  136|       | expectations that were not met, or exceptions raised during test setup
  137|       | and teardown. By default, the failure will be reported as an
  138|       | XCTest failure, and the example will be highlighted in Xcode.
  139|       | */
  140|       |- (void)recordFailureWithDescription:(NSString *)description
  141|       |                              inFile:(NSString *)filePath
  142|       |                              atLine:(NSUInteger)lineNumber
  143|      0|                            expected:(BOOL)expected {
  144|      0|    if (self != [QuickSpec current]) {
  145|      0|        [[QuickSpec current] recordFailureWithDescription:description
  146|      0|                                                   inFile:filePath
  147|      0|                                                   atLine:lineNumber
  148|      0|                                                 expected:expected];
  149|      0|        return;
  150|      0|    }
  151|       |
  152|      0|    if (self.example.isSharedExample) {
  153|      0|        filePath = self.example.callsite.file;
  154|      0|        lineNumber = self.example.callsite.line;
  155|      0|    }
  156|      0|    [super recordFailureWithDescription:description
  157|      0|                                 inFile:filePath
  158|      0|                                 atLine:lineNumber
  159|      0|                               expected:expected];
  160|      0|}
  161|       |#pragma clang diagnostic pop
  162|       |
  163|       |@end
  164|       |
  165|       |#pragma mark - Test Observation
  166|       |
  167|       |__attribute__((constructor))
  168|      1|static void registerQuickTestObservation(void) {
  169|      1|    [[XCTestObservationCenter sharedTestObservationCenter] addTestObserver:[QuickTestObservation sharedInstance]];
  170|      1|}

/Users/lenar/Desktop/LHypothesis/Example/Pods/Quick/Sources/QuickObjectiveC/XCTestSuite+QuickTestSuiteBuilder.m:
    1|       |#import <XCTest/XCTest.h>
    2|       |#import <objc/runtime.h>
    3|       |
    4|       |#if __has_include("Quick-Swift.h")
    5|       |#import "Quick-Swift.h"
    6|       |#else
    7|       |#import <Quick/Quick-Swift.h>
    8|       |#endif
    9|       |
   10|       |@interface XCTestSuite (QuickTestSuiteBuilder)
   11|       |@end
   12|       |
   13|       |@implementation XCTestSuite (QuickTestSuiteBuilder)
   14|       |
   15|       |/**
   16|       | In order to ensure we can correctly build dynamic test suites, we need to
   17|       | replace some of the default test suite constructors.
   18|       | */
   19|      1|+ (void)load {
   20|      1|    Method testCaseWithName = class_getClassMethod(self, @selector(testSuiteForTestCaseWithName:));
   21|      1|    Method hooked_testCaseWithName = class_getClassMethod(self, @selector(qck_hooked_testSuiteForTestCaseWithName:));
   22|      1|    method_exchangeImplementations(testCaseWithName, hooked_testCaseWithName);
   23|      1|}
   24|       |
   25|       |/**
   26|       | The `+testSuiteForTestCaseWithName:` method is called when a specific test case
   27|       | class is run from the Xcode test navigator. If the built test suite is `nil`,
   28|       | Xcode will not run any tests for that test case.
   29|       |
   30|       | Given if the following test case class is run from the Xcode test navigator:
   31|       |
   32|       |    FooSpec
   33|       |        testFoo
   34|       |        testBar
   35|       |
   36|       | XCTest will invoke this once per test case, with test case names following this format:
   37|       |
   38|       |    FooSpec/testFoo
   39|       |    FooSpec/testBar
   40|       | */
   41|      0|+ (nullable instancetype)qck_hooked_testSuiteForTestCaseWithName:(nonnull NSString *)name {
   42|      0|    return [QuickTestSuite selectedTestSuiteForTestCaseWithName:name];
   43|      0|}
   44|       |
   45|       |@end

