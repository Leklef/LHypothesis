/Users/lenar/Desktop/LHypothesis/Example/Pods/FirebaseCoreDiagnostics/Firebase/CoreDiagnostics/FIRCDLibrary/FIRCoreDiagnostics.m:
    1|       |/*
    2|       | * Copyright 2019 Google
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | *      http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |#import <objc/runtime.h>
   18|       |#include <sys/utsname.h>
   19|       |
   20|       |#import <GoogleDataTransport/GoogleDataTransport.h>
   21|       |
   22|       |#import <GoogleUtilities/GULAppEnvironmentUtil.h>
   23|       |#import <GoogleUtilities/GULHeartbeatDateStorage.h>
   24|       |#import <GoogleUtilities/GULLogger.h>
   25|       |
   26|       |#import "Interop/CoreDiagnostics/Public/FIRCoreDiagnosticsData.h"
   27|       |#import "Interop/CoreDiagnostics/Public/FIRCoreDiagnosticsInterop.h"
   28|       |
   29|       |#import <nanopb/pb.h>
   30|       |#import <nanopb/pb_decode.h>
   31|       |#import <nanopb/pb_encode.h>
   32|       |
   33|       |#import "Firebase/CoreDiagnostics/FIRCDLibrary/Protogen/nanopb/firebasecore.nanopb.h"
   34|       |
   35|       |/** The logger service string to use when printing to the console. */
   36|       |static GULLoggerService kFIRCoreDiagnostics = @"[FirebaseCoreDiagnostics/FIRCoreDiagnostics]";
   37|       |
   38|       |#ifdef FIREBASE_BUILD_ZIP_FILE
   39|       |static BOOL kUsingZipFile = YES;
   40|       |#else   // FIREBASE_BUILD_ZIP_FILE
   41|       |static BOOL kUsingZipFile = NO;
   42|       |#endif  // FIREBASE_BUILD_ZIP_FILE
   43|       |
   44|       |#if SWIFT_PACKAGE
   45|       |#define kDeploymentType logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_SPM
   46|       |#elif FIREBASE_BUILD_CARTHAGE
   47|       |#define kDeploymentType logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_CARTHAGE
   48|       |#elif FIREBASE_BUILD_ZIP_FILE
   49|       |#define kDeploymentType logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_ZIP_FILE
   50|       |#else
   51|      0|#define kDeploymentType logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_COCOAPODS
   52|       |#endif
   53|       |
   54|       |static NSString *const kFIRServiceMLModelInterpreter = @"MLModelInterpreter";
   55|       |
   56|       |static NSString *const kFIRServiceAdMob = @"AdMob";
   57|       |static NSString *const kFIRServiceAuth = @"Auth";
   58|       |static NSString *const kFIRServiceAuthUI = @"AuthUI";
   59|       |static NSString *const kFIRServiceCrash = @"Crash";
   60|       |static NSString *const kFIRServiceDatabase = @"Database";
   61|       |static NSString *const kFIRServiceDynamicLinks = @"DynamicLinks";
   62|       |static NSString *const kFIRServiceFirestore = @"Firestore";
   63|       |static NSString *const kFIRServiceFunctions = @"Functions";
   64|       |static NSString *const kFIRServiceIAM = @"InAppMessaging";
   65|       |static NSString *const kFIRServiceInstanceID = @"InstanceID";
   66|       |static NSString *const kFIRServiceInvites = @"Invites";
   67|       |static NSString *const kFIRServiceMessaging = @"Messaging";
   68|       |static NSString *const kFIRServiceMeasurement = @"Measurement";
   69|       |static NSString *const kFIRServicePerformance = @"Performance";
   70|       |static NSString *const kFIRServiceRemoteConfig = @"RemoteConfig";
   71|       |static NSString *const kFIRServiceStorage = @"Storage";
   72|       |static NSString *const kGGLServiceAnalytics = @"Analytics";
   73|       |static NSString *const kGGLServiceSignIn = @"SignIn";
   74|       |static NSString *const kFIRAppDiagnosticsConfigurationTypeKey =
   75|       |    @"FIRAppDiagnosticsConfigurationTypeKey";
   76|       |static NSString *const kFIRAppDiagnosticsFIRAppKey = @"FIRAppDiagnosticsFIRAppKey";
   77|       |static NSString *const kFIRAppDiagnosticsSDKNameKey = @"FIRAppDiagnosticsSDKNameKey";
   78|       |static NSString *const kFIRAppDiagnosticsSDKVersionKey = @"FIRAppDiagnosticsSDKVersionKey";
   79|       |static NSString *const kFIRCoreDiagnosticsHeartbeatTag = @"FIRCoreDiagnostics";
   80|       |
   81|       |/**
   82|       | * The file name to the recent heartbeat date.
   83|       | */
   84|       |NSString *const kFIRCoreDiagnosticsHeartbeatDateFileName = @"FIREBASE_DIAGNOSTICS_HEARTBEAT_DATE";
   85|       |
   86|       |/**
   87|       | * @note This should implement the GDTCOREventDataObject protocol, but can't because of
   88|       | * weak-linking.
   89|       | */
   90|       |@interface FIRCoreDiagnosticsLog : NSObject
   91|       |
   92|       |/** The config that will be converted to proto bytes. */
   93|       |@property(nonatomic) logs_proto_mobilesdk_ios_ICoreConfiguration config;
   94|       |
   95|       |@end
   96|       |
   97|       |@implementation FIRCoreDiagnosticsLog
   98|       |
   99|      0|- (instancetype)initWithConfig:(logs_proto_mobilesdk_ios_ICoreConfiguration)config {
  100|      0|  self = [super init];
  101|      0|  if (self) {
  102|      0|    _config = config;
  103|      0|  }
  104|      0|  return self;
  105|      0|}
  106|       |
  107|       |// Provided and required by the GDTCOREventDataObject protocol.
  108|      0|- (NSData *)transportBytes {
  109|      0|  pb_ostream_t sizestream = PB_OSTREAM_SIZING;
  110|       |
  111|       |  // Encode 1 time to determine the size.
  112|      0|  if (!pb_encode(&sizestream, logs_proto_mobilesdk_ios_ICoreConfiguration_fields, &_config)) {
  113|      0|    GDTCORLogError(GDTCORMCETransportBytesError, @"Error in nanopb encoding for size: %s",
  114|      0|                   PB_GET_ERROR(&sizestream));
  115|      0|  }
  116|       |
  117|       |  // Encode a 2nd time to actually get the bytes from it.
  118|      0|  size_t bufferSize = sizestream.bytes_written;
  119|      0|  CFMutableDataRef dataRef = CFDataCreateMutable(CFAllocatorGetDefault(), bufferSize);
  120|      0|  CFDataSetLength(dataRef, bufferSize);
  121|      0|  pb_ostream_t ostream = pb_ostream_from_buffer((void *)CFDataGetBytePtr(dataRef), bufferSize);
  122|      0|  if (!pb_encode(&ostream, logs_proto_mobilesdk_ios_ICoreConfiguration_fields, &_config)) {
  123|      0|    GDTCORLogError(GDTCORMCETransportBytesError, @"Error in nanopb encoding for bytes: %s",
  124|      0|                   PB_GET_ERROR(&ostream));
  125|      0|  }
  126|      0|  CFDataSetLength(dataRef, ostream.bytes_written);
  127|       |
  128|      0|  return CFBridgingRelease(dataRef);
  129|      0|}
  130|       |
  131|      0|- (void)dealloc {
  132|      0|  pb_release(logs_proto_mobilesdk_ios_ICoreConfiguration_fields, &_config);
  133|      0|}
  134|       |
  135|       |@end
  136|       |
  137|       |NS_ASSUME_NONNULL_BEGIN
  138|       |
  139|       |/** This class produces a protobuf containing diagnostics and usage data to be logged. */
  140|       |@interface FIRCoreDiagnostics : NSObject <FIRCoreDiagnosticsInterop>
  141|       |
  142|       |/** The queue on which all diagnostics collection will occur. */
  143|       |@property(nonatomic, readonly) dispatch_queue_t diagnosticsQueue;
  144|       |
  145|       |/** The transport object used to send data. */
  146|       |@property(nonatomic, readonly) GDTCORTransport *transport;
  147|       |
  148|       |/** The storage to store the date of the last sent heartbeat. */
  149|       |@property(nonatomic, readonly) GULHeartbeatDateStorage *heartbeatDateStorage;
  150|       |
  151|       |@end
  152|       |
  153|       |NS_ASSUME_NONNULL_END
  154|       |
  155|       |@implementation FIRCoreDiagnostics
  156|       |
  157|      0|+ (instancetype)sharedInstance {
  158|      0|  static FIRCoreDiagnostics *sharedInstance;
  159|      0|  static dispatch_once_t onceToken;
  160|      0|  dispatch_once(&onceToken, ^{
  161|      0|    sharedInstance = [[FIRCoreDiagnostics alloc] init];
  162|      0|  });
  163|      0|  return sharedInstance;
  164|      0|}
  165|       |
  166|      0|- (instancetype)init {
  167|      0|  GDTCORTransport *transport = [[GDTCORTransport alloc] initWithMappingID:@"137"
  168|      0|                                                             transformers:nil
  169|      0|                                                                   target:kGDTCORTargetFLL];
  170|       |
  171|      0|  GULHeartbeatDateStorage *dateStorage =
  172|      0|      [[GULHeartbeatDateStorage alloc] initWithFileName:kFIRCoreDiagnosticsHeartbeatDateFileName];
  173|       |
  174|      0|  return [self initWithTransport:transport heartbeatDateStorage:dateStorage];
  175|      0|}
  176|       |
  177|       |/** Initializer for unit tests.
  178|       | *
  179|       | * @param transport A `GDTCORTransport` instance which that be used to send event.
  180|       | * @param heartbeatDateStorage An instanse of date storage to track heartbeat sending.
  181|       | * @return Returns the initialized `FIRCoreDiagnostics` instance.
  182|       | */
  183|       |- (instancetype)initWithTransport:(GDTCORTransport *)transport
  184|      0|             heartbeatDateStorage:(GULHeartbeatDateStorage *)heartbeatDateStorage {
  185|      0|  self = [super init];
  186|      0|  if (self) {
  187|      0|    _diagnosticsQueue =
  188|      0|        dispatch_queue_create("com.google.FIRCoreDiagnostics", DISPATCH_QUEUE_SERIAL);
  189|      0|    _transport = transport;
  190|      0|    _heartbeatDateStorage = heartbeatDateStorage;
  191|      0|  }
  192|      0|  return self;
  193|      0|}
  194|       |
  195|       |#pragma mark - nanopb helper functions
  196|       |
  197|       |/** Callocs a pb_bytes_array and copies the given NSString's bytes into the bytes array.
  198|       | *
  199|       | * @note Memory needs to be free manually, through pb_free or pb_release.
  200|       | * @param string The string to encode as pb_bytes.
  201|       | */
  202|      0|pb_bytes_array_t *FIREncodeString(NSString *string) {
  203|      0|  NSData *stringBytes = [string dataUsingEncoding:NSUTF8StringEncoding];
  204|      0|  return FIREncodeData(stringBytes);
  205|      0|}
  206|       |
  207|       |/** Callocs a pb_bytes_array and copies the given NSData bytes into the bytes array.
  208|       | *
  209|       | * @note Memory needs to be free manually, through pb_free or pb_release.
  210|       | * @param data The data to copy into the new bytes array.
  211|       | */
  212|      0|pb_bytes_array_t *FIREncodeData(NSData *data) {
  213|      0|  pb_bytes_array_t *pbBytesArray = calloc(1, PB_BYTES_ARRAY_T_ALLOCSIZE(data.length));
  214|      0|  if (pbBytesArray != NULL) {
  215|      0|    [data getBytes:pbBytesArray->bytes length:data.length];
  216|      0|    pbBytesArray->size = (pb_size_t)data.length;
  217|      0|  }
  218|      0|  return pbBytesArray;
  219|      0|}
  220|       |
  221|       |/** Maps a service string to the representative nanopb enum.
  222|       | *
  223|       | * @param serviceString The SDK service string to convert.
  224|       | * @return The representative nanopb enum.
  225|       | */
  226|       |logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType FIRMapFromServiceStringToTypeEnum(
  227|      0|    NSString *serviceString) {
  228|      0|  static NSDictionary<NSString *, NSNumber *> *serviceStringToTypeEnum;
  229|      0|  if (serviceStringToTypeEnum == nil) {
  230|      0|    serviceStringToTypeEnum = @{
  231|      0|      kFIRServiceAdMob : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ADMOB),
  232|      0|      kFIRServiceMessaging : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MESSAGING),
  233|      0|      kFIRServiceMeasurement :
  234|      0|          @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MEASUREMENT),
  235|      0|      kFIRServiceRemoteConfig :
  236|      0|          @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_REMOTE_CONFIG),
  237|      0|      kFIRServiceDatabase : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_DATABASE),
  238|      0|      kFIRServiceDynamicLinks :
  239|      0|          @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_DYNAMIC_LINKS),
  240|      0|      kFIRServiceAuth : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_AUTH),
  241|      0|      kFIRServiceAuthUI : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_AUTH_UI),
  242|      0|      kFIRServiceFirestore : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_FIRESTORE),
  243|      0|      kFIRServiceFunctions : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_FUNCTIONS),
  244|      0|      kFIRServicePerformance :
  245|      0|          @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_PERFORMANCE),
  246|      0|      kFIRServiceStorage : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_STORAGE),
  247|      0|      kFIRServiceMLModelInterpreter :
  248|      0|          @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_MODEL_INTERPRETER),
  249|      0|      kGGLServiceAnalytics : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ANALYTICS),
  250|      0|      kGGLServiceSignIn : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_SIGN_IN),
  251|      0|      kFIRServiceIAM : @(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_IN_APP_MESSAGING),
  252|      0|    };
  253|      0|  }
  254|      0|  if (serviceStringToTypeEnum[serviceString] != nil) {
  255|      0|    return (int32_t)serviceStringToTypeEnum[serviceString].longLongValue;
  256|      0|  }
  257|      0|  return logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_UNKNOWN_SDK_SERVICE;
  258|      0|}
  259|       |
  260|       |#pragma mark - Proto population functions
  261|       |
  262|       |/** Populates the given proto with data related to an SDK logDiagnostics call from the
  263|       | * diagnosticObjects dictionary.
  264|       | *
  265|       | * @param config The proto to populate
  266|       | * @param diagnosticObjects The dictionary of diagnostics objects.
  267|       | */
  268|       |void FIRPopulateProtoWithInfoFromUserInfoParams(logs_proto_mobilesdk_ios_ICoreConfiguration *config,
  269|      0|                                                NSDictionary<NSString *, id> *diagnosticObjects) {
  270|      0|  NSNumber *configurationType = diagnosticObjects[kFIRCDConfigurationTypeKey];
  271|      0|  if (configurationType != nil) {
  272|      0|    switch (configurationType.integerValue) {
  273|      0|      case logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_CORE:
  274|      0|        config->configuration_type =
  275|      0|            logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_CORE;
  276|      0|        config->has_configuration_type = 1;
  277|      0|        break;
  278|      0|      case logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_SDK:
  279|      0|        config->configuration_type =
  280|      0|            logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_SDK;
  281|      0|        config->has_configuration_type = 1;
  282|      0|        break;
  283|      0|      default:
  284|      0|        break;
  285|      0|    }
  286|      0|  }
  287|       |
  288|      0|  NSString *sdkName = diagnosticObjects[kFIRCDSdkNameKey];
  289|      0|  if (sdkName) {
  290|      0|    config->sdk_name = FIRMapFromServiceStringToTypeEnum(sdkName);
  291|      0|    config->has_sdk_name = 1;
  292|      0|  }
  293|       |
  294|      0|  NSString *version = diagnosticObjects[kFIRCDSdkVersionKey];
  295|      0|  if (version) {
  296|      0|    config->sdk_version = FIREncodeString(version);
  297|      0|  }
  298|      0|}
  299|       |
  300|       |/** Populates the given proto with data from the calling FIRApp using the given
  301|       | * diagnosticObjects dictionary.
  302|       | *
  303|       | * @param config The proto to populate
  304|       | * @param diagnosticObjects The dictionary of diagnostics objects.
  305|       | */
  306|       |void FIRPopulateProtoWithCommonInfoFromApp(logs_proto_mobilesdk_ios_ICoreConfiguration *config,
  307|      0|                                           NSDictionary<NSString *, id> *diagnosticObjects) {
  308|      0|  config->pod_name = logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_FIREBASE;
  309|      0|  config->has_pod_name = 1;
  310|       |
  311|      0|  if (!diagnosticObjects[kFIRCDllAppsCountKey]) {
  312|      0|    GDTCORLogError(GDTCORMCEGeneralError, @"%@",
  313|      0|                   @"App count is a required value in the data dict.");
  314|      0|  }
  315|      0|  config->app_count = (int32_t)[diagnosticObjects[kFIRCDllAppsCountKey] integerValue];
  316|      0|  config->has_app_count = 1;
  317|       |
  318|      0|  NSString *googleAppID = diagnosticObjects[kFIRCDGoogleAppIDKey];
  319|      0|  if (googleAppID.length) {
  320|      0|    config->app_id = FIREncodeString(googleAppID);
  321|      0|  }
  322|       |
  323|      0|  NSString *bundleID = diagnosticObjects[kFIRCDBundleIDKey];
  324|      0|  if (bundleID.length) {
  325|      0|    config->bundle_id = FIREncodeString(bundleID);
  326|      0|  }
  327|       |
  328|      0|  NSString *firebaseUserAgent = diagnosticObjects[kFIRCDFirebaseUserAgentKey];
  329|      0|  if (firebaseUserAgent.length) {
  330|      0|    config->platform_info = FIREncodeString(firebaseUserAgent);
  331|      0|  }
  332|       |
  333|      0|  NSNumber *usingOptionsFromDefaultPlist = diagnosticObjects[kFIRCDUsingOptionsFromDefaultPlistKey];
  334|      0|  if (usingOptionsFromDefaultPlist != nil) {
  335|      0|    config->use_default_app = [usingOptionsFromDefaultPlist boolValue];
  336|      0|    config->has_use_default_app = 1;
  337|      0|  }
  338|       |
  339|      0|  NSString *libraryVersionID = diagnosticObjects[kFIRCDLibraryVersionIDKey];
  340|      0|  if (libraryVersionID) {
  341|      0|    config->icore_version = FIREncodeString(libraryVersionID);
  342|      0|  }
  343|       |
  344|      0|  NSString *deviceModel = [GULAppEnvironmentUtil deviceModel];
  345|      0|  if (deviceModel.length) {
  346|      0|    config->device_model = FIREncodeString(deviceModel);
  347|      0|  }
  348|       |
  349|      0|  NSString *osVersion = [GULAppEnvironmentUtil systemVersion];
  350|      0|  if (osVersion.length) {
  351|      0|    config->os_version = FIREncodeString(osVersion);
  352|      0|  }
  353|       |
  354|      0|  config->using_zip_file = kUsingZipFile;
  355|      0|  config->has_using_zip_file = 1;
  356|      0|  config->deployment_type = kDeploymentType;
  357|      0|  config->has_deployment_type = 1;
  358|      0|  config->deployed_in_app_store = [GULAppEnvironmentUtil isFromAppStore];
  359|      0|  config->has_deployed_in_app_store = 1;
  360|      0|}
  361|       |
  362|       |/** Populates the given proto with installed services data.
  363|       | *
  364|       | * @param config The proto to populate
  365|       | */
  366|      0|void FIRPopulateProtoWithInstalledServices(logs_proto_mobilesdk_ios_ICoreConfiguration *config) {
  367|      0|  NSMutableArray<NSNumber *> *sdkServiceInstalledArray = [NSMutableArray array];
  368|       |
  369|       |  // AdMob
  370|      0|  if (NSClassFromString(@"GADBannerView") != nil) {
  371|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceAdMob))];
  372|      0|  }
  373|       |  // CloudMessaging
  374|      0|  if (NSClassFromString(@"FIRMessaging") != nil) {
  375|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceMessaging))];
  376|      0|  }
  377|       |  // RemoteConfig
  378|      0|  if (NSClassFromString(@"FIRRemoteConfig") != nil) {
  379|      0|    [sdkServiceInstalledArray
  380|      0|        addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceRemoteConfig))];
  381|      0|  }
  382|       |  // Measurement/Analtyics
  383|      0|  if (NSClassFromString(@"FIRAnalytics") != nil) {
  384|      0|    [sdkServiceInstalledArray
  385|      0|        addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceMeasurement))];
  386|      0|  }
  387|       |  // ML Model Interpreter
  388|      0|  if (NSClassFromString(@"FIRCustomModelInterpreter") != nil) {
  389|      0|    [sdkServiceInstalledArray
  390|      0|        addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceMLModelInterpreter))];
  391|      0|  }
  392|       |  // Database
  393|      0|  if (NSClassFromString(@"FIRDatabase") != nil) {
  394|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceDatabase))];
  395|      0|  }
  396|       |  // DynamicDeepLink
  397|      0|  if (NSClassFromString(@"FIRDynamicLinks") != nil) {
  398|      0|    [sdkServiceInstalledArray
  399|      0|        addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceDynamicLinks))];
  400|      0|  }
  401|       |  // Auth
  402|      0|  if (NSClassFromString(@"FIRAuth") != nil) {
  403|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceAuth))];
  404|      0|  }
  405|       |  // AuthUI
  406|      0|  if (NSClassFromString(@"FUIAuth") != nil) {
  407|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceAuthUI))];
  408|      0|  }
  409|       |  // Firestore
  410|      0|  if (NSClassFromString(@"FIRFirestore") != nil) {
  411|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceFirestore))];
  412|      0|  }
  413|       |  // Functions
  414|      0|  if (NSClassFromString(@"FIRFunctions") != nil) {
  415|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceFunctions))];
  416|      0|  }
  417|       |  // Performance
  418|      0|  if (NSClassFromString(@"FIRPerformance") != nil) {
  419|      0|    [sdkServiceInstalledArray
  420|      0|        addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServicePerformance))];
  421|      0|  }
  422|       |  // Storage
  423|      0|  if (NSClassFromString(@"FIRStorage") != nil) {
  424|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceStorage))];
  425|      0|  }
  426|       |  // SignIn via Google pod
  427|      0|  if (NSClassFromString(@"GIDSignIn") != nil && NSClassFromString(@"GGLContext") != nil) {
  428|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kGGLServiceSignIn))];
  429|      0|  }
  430|       |  // Analytics via Google pod
  431|      0|  if (NSClassFromString(@"GAI") != nil && NSClassFromString(@"GGLContext") != nil) {
  432|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kGGLServiceAnalytics))];
  433|      0|  }
  434|       |
  435|       |  // In-App Messaging
  436|      0|  if (NSClassFromString(@"FIRInAppMessaging") != nil) {
  437|      0|    [sdkServiceInstalledArray addObject:@(FIRMapFromServiceStringToTypeEnum(kFIRServiceIAM))];
  438|      0|  }
  439|       |
  440|      0|  logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType *servicesInstalled =
  441|      0|      calloc(sdkServiceInstalledArray.count,
  442|      0|             sizeof(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType));
  443|      0|  if (servicesInstalled == NULL) {
  444|      0|    return;
  445|      0|  }
  446|      0|  for (NSUInteger i = 0; i < sdkServiceInstalledArray.count; i++) {
  447|      0|    NSNumber *typeEnum = sdkServiceInstalledArray[i];
  448|      0|    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType serviceType =
  449|      0|        (int32_t)typeEnum.integerValue;
  450|      0|    servicesInstalled[i] = serviceType;
  451|      0|  }
  452|       |
  453|      0|  config->sdk_service_installed = servicesInstalled;
  454|      0|  config->sdk_service_installed_count = (int32_t)sdkServiceInstalledArray.count;
  455|      0|}
  456|       |
  457|       |/** Populates the proto with Info.plist values.
  458|       | *
  459|       | * @param config The proto to populate.
  460|       | */
  461|      0|void FIRPopulateProtoWithInfoPlistValues(logs_proto_mobilesdk_ios_ICoreConfiguration *config) {
  462|      0|  NSDictionary<NSString *, id> *info = [[NSBundle mainBundle] infoDictionary];
  463|       |
  464|      0|  NSString *xcodeVersion = info[@"DTXcodeBuild"] ?: @"";
  465|      0|  NSString *sdkVersion = info[@"DTSDKBuild"] ?: @"";
  466|      0|  NSString *combinedVersions = [NSString stringWithFormat:@"%@-%@", xcodeVersion, sdkVersion];
  467|      0|  config->apple_framework_version = FIREncodeString(combinedVersions);
  468|       |
  469|      0|  NSString *minVersion = info[@"MinimumOSVersion"];
  470|      0|  if (minVersion) {
  471|      0|    config->min_supported_ios_version = FIREncodeString(minVersion);
  472|      0|  }
  473|       |
  474|       |  // Apps can turn off swizzling in the Info.plist, check if they've explicitly set the value and
  475|       |  // report it. It's enabled by default.
  476|      0|  NSNumber *appDelegateSwizzledNum = info[@"FirebaseAppDelegateProxyEnabled"];
  477|      0|  BOOL appDelegateSwizzled = YES;
  478|      0|  if ([appDelegateSwizzledNum isKindOfClass:[NSNumber class]]) {
  479|      0|    appDelegateSwizzled = [appDelegateSwizzledNum boolValue];
  480|      0|  }
  481|      0|  config->swizzling_enabled = appDelegateSwizzled;
  482|      0|  config->has_swizzling_enabled = 1;
  483|      0|}
  484|       |
  485|       |#pragma mark - FIRCoreDiagnosticsInterop
  486|       |
  487|      0|+ (void)sendDiagnosticsData:(nonnull id<FIRCoreDiagnosticsData>)diagnosticsData {
  488|      0|  FIRCoreDiagnostics *diagnostics = [FIRCoreDiagnostics sharedInstance];
  489|      0|  [diagnostics sendDiagnosticsData:diagnosticsData];
  490|      0|}
  491|       |
  492|      0|- (void)sendDiagnosticsData:(nonnull id<FIRCoreDiagnosticsData>)diagnosticsData {
  493|      0|  dispatch_async(self.diagnosticsQueue, ^{
  494|      0|    NSDictionary<NSString *, id> *diagnosticObjects = diagnosticsData.diagnosticObjects;
  495|      0|    NSNumber *isDataCollectionDefaultEnabled =
  496|      0|        diagnosticObjects[kFIRCDIsDataCollectionDefaultEnabledKey];
  497|      0|    if (isDataCollectionDefaultEnabled && ![isDataCollectionDefaultEnabled boolValue]) {
  498|      0|      return;
  499|      0|    }
  500|       |
  501|       |    // Create the proto.
  502|      0|    logs_proto_mobilesdk_ios_ICoreConfiguration icore_config =
  503|      0|        logs_proto_mobilesdk_ios_ICoreConfiguration_init_default;
  504|       |
  505|      0|    icore_config.using_gdt = 1;
  506|      0|    icore_config.has_using_gdt = 1;
  507|       |
  508|       |    // Populate the proto with information.
  509|      0|    FIRPopulateProtoWithInfoFromUserInfoParams(&icore_config, diagnosticObjects);
  510|      0|    FIRPopulateProtoWithCommonInfoFromApp(&icore_config, diagnosticObjects);
  511|      0|    FIRPopulateProtoWithInstalledServices(&icore_config);
  512|      0|    FIRPopulateProtoWithInfoPlistValues(&icore_config);
  513|      0|    [self setHeartbeatFlagIfNeededToConfig:&icore_config];
  514|       |
  515|       |    // This log object is capable of converting the proto to bytes.
  516|      0|    FIRCoreDiagnosticsLog *log = [[FIRCoreDiagnosticsLog alloc] initWithConfig:icore_config];
  517|       |
  518|       |    // Send the log as a telemetry event.
  519|      0|    GDTCOREvent *event = [self.transport eventForTransport];
  520|      0|    event.dataObject = (id<GDTCOREventDataObject>)log;
  521|      0|    [self.transport sendTelemetryEvent:event];
  522|      0|  });
  523|      0|}
  524|       |
  525|       |#pragma mark - Heartbeat
  526|       |
  527|      0|- (void)setHeartbeatFlagIfNeededToConfig:(logs_proto_mobilesdk_ios_ICoreConfiguration *)config {
  528|       |  // Check if need to send a heartbeat.
  529|      0|  NSDate *currentDate = [NSDate date];
  530|      0|  NSDate *lastCheckin =
  531|      0|      [self.heartbeatDateStorage heartbeatDateForTag:kFIRCoreDiagnosticsHeartbeatTag];
  532|      0|  if (lastCheckin) {
  533|       |    // Ensure the previous checkin was on a different date in the past.
  534|      0|    if ([self isDate:currentDate inSameDayOrBeforeThan:lastCheckin]) {
  535|      0|      return;
  536|      0|    }
  537|      0|  }
  538|       |
  539|       |  // Update heartbeat sent date.
  540|      0|  [self.heartbeatDateStorage setHearbeatDate:currentDate forTag:kFIRCoreDiagnosticsHeartbeatTag];
  541|       |  // Set the flag.
  542|      0|  config->sdk_name = logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ICORE;
  543|      0|  config->has_sdk_name = 1;
  544|      0|}
  545|       |
  546|      0|- (BOOL)isDate:(NSDate *)date1 inSameDayOrBeforeThan:(NSDate *)date2 {
  547|      0|  return [[NSCalendar currentCalendar] isDate:date1 inSameDayAsDate:date2] ||
  548|      0|         [date1 compare:date2] == NSOrderedAscending;
  549|      0|}
  550|       |
  551|       |@end

/Users/lenar/Desktop/LHypothesis/Example/Pods/FirebaseCoreDiagnostics/Firebase/CoreDiagnostics/FIRCDLibrary/Protogen/nanopb/firebasecore.nanopb.h:
    1|       |/*
    2|       | * Copyright 2019 Google
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | *      http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |/* Automatically generated nanopb header */
   18|       |/* Generated by nanopb-0.3.9.7 */
   19|       |
   20|       |#ifndef PB_LOGS_PROTO_MOBILESDK_IOS_FIREBASECORE_NANOPB_H_INCLUDED
   21|       |#define PB_LOGS_PROTO_MOBILESDK_IOS_FIREBASECORE_NANOPB_H_INCLUDED
   22|       |#include <nanopb/pb.h>
   23|       |
   24|       |/* @@protoc_insertion_point(includes) */
   25|       |#if PB_PROTO_HEADER_VERSION != 30
   26|       |#error Regenerate this file with the current version of nanopb generator.
   27|       |#endif
   28|       |
   29|       |
   30|       |/* Enum definitions */
   31|       |typedef enum _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType {
   32|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_UNKNOWN_CONFIGURATION_TYPE = 0,
   33|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_CORE = 1,
   34|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_SDK = 2
   35|       |} logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType;
   36|      0|#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_MIN logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_UNKNOWN_CONFIGURATION_TYPE
   37|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_MAX logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_SDK
   38|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_ARRAYSIZE ((logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType)(logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_SDK+1))
   39|       |
   40|       |typedef enum _logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType {
   41|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_UNKNOWN_BUILD_TYPE = 0,
   42|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_INTERNAL = 1,
   43|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_EAP = 2,
   44|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_PROD = 3
   45|       |} logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType;
   46|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_MIN logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_UNKNOWN_BUILD_TYPE
   47|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_MAX logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_PROD
   48|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_ARRAYSIZE ((logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType)(logs_proto_mobilesdk_ios_ICoreConfiguration_BuildType_PROD+1))
   49|       |
   50|       |typedef enum _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType {
   51|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_UNKNOWN_SDK_SERVICE = 0,
   52|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ICORE = 1,
   53|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ADMOB = 2,
   54|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_APP_INVITE = 3,
   55|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_SIGN_IN = 5,
   56|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_GCM = 6,
   57|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MAPS = 7,
   58|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_SCION = 8,
   59|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ANALYTICS = 9,
   60|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_APP_INDEXING = 10,
   61|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_CONFIG = 11,
   62|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_DURABLE_DEEP_LINKS = 12,
   63|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_CRASH = 13,
   64|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_AUTH = 14,
   65|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_DATABASE = 15,
   66|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_STORAGE = 16,
   67|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MESSAGING = 17,
   68|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MEASUREMENT = 18,
   69|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_REMOTE_CONFIG = 19,
   70|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_DYNAMIC_LINKS = 20,
   71|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_INVITES = 21,
   72|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_AUTH_UI = 22,
   73|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_FIRESTORE = 23,
   74|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_PERFORMANCE = 24,
   75|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_FACE = 26,
   76|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_BARCODE = 27,
   77|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_TEXT = 28,
   78|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_LABEL = 29,
   79|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_MODEL_INTERPRETER = 30,
   80|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_IN_APP_MESSAGING = 31,
   81|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_FUNCTIONS = 32,
   82|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_NATURAL_LANGUAGE = 33,
   83|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_AUTOML = 34,
   84|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_OBJECT_DETECTION = 35
   85|       |} logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType;
   86|      0|#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MIN logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_UNKNOWN_SDK_SERVICE
   87|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MAX logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_OBJECT_DETECTION
   88|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ARRAYSIZE ((logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType)(logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_ML_VISION_ON_DEVICE_OBJECT_DETECTION+1))
   89|       |
   90|       |typedef enum _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName {
   91|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_UNKNOWN_POD_NAME = 0,
   92|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_GOOGLE = 1,
   93|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_FIREBASE = 2
   94|       |} logs_proto_mobilesdk_ios_ICoreConfiguration_PodName;
   95|      0|#define _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_MIN logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_UNKNOWN_POD_NAME
   96|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_MAX logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_FIREBASE
   97|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_ARRAYSIZE ((logs_proto_mobilesdk_ios_ICoreConfiguration_PodName)(logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_FIREBASE+1))
   98|       |
   99|       |typedef enum _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType {
  100|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_UNKNOWN = 0,
  101|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_COCOAPODS = 1,
  102|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_ZIP_FILE = 2,
  103|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_CARTHAGE = 3,
  104|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_SPM = 4
  105|       |} logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType;
  106|      0|#define _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_MIN logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_UNKNOWN
  107|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_MAX logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_SPM
  108|       |#define _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_ARRAYSIZE ((logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType)(logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_SPM+1))
  109|       |
  110|       |/* Struct definitions */
  111|       |typedef struct _logs_proto_mobilesdk_ios_ICoreConfiguration {
  112|       |    bool has_configuration_type;
  113|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType configuration_type;
  114|       |    pb_size_t sdk_service_installed_count;
  115|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType *sdk_service_installed;
  116|       |    pb_bytes_array_t *device_model;
  117|       |    pb_bytes_array_t *app_id;
  118|       |    pb_bytes_array_t *bundle_id;
  119|       |    bool has_pod_name;
  120|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_PodName pod_name;
  121|       |    pb_bytes_array_t *icore_version;
  122|       |    pb_bytes_array_t *sdk_version;
  123|       |    bool has_sdk_name;
  124|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType sdk_name;
  125|       |    bool has_app_count;
  126|       |    int32_t app_count;
  127|       |    pb_bytes_array_t *os_version;
  128|       |    pb_bytes_array_t *min_supported_ios_version;
  129|       |    bool has_use_default_app;
  130|       |    bool use_default_app;
  131|       |    bool has_deployed_in_app_store;
  132|       |    bool deployed_in_app_store;
  133|       |    bool has_dynamic_framework_count;
  134|       |    int32_t dynamic_framework_count;
  135|       |    pb_bytes_array_t *apple_framework_version;
  136|       |    bool has_using_zip_file;
  137|       |    bool using_zip_file;
  138|       |    bool has_deployment_type;
  139|       |    logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType deployment_type;
  140|       |    pb_bytes_array_t *platform_info;
  141|       |    bool has_swizzling_enabled;
  142|       |    bool swizzling_enabled;
  143|       |    bool has_using_gdt;
  144|       |    bool using_gdt;
  145|       |/* @@protoc_insertion_point(struct:logs_proto_mobilesdk_ios_ICoreConfiguration) */
  146|       |} logs_proto_mobilesdk_ios_ICoreConfiguration;
  147|       |
  148|       |/* Default values for struct fields */
  149|       |
  150|       |/* Initializer values for message structs */
  151|      0|#define logs_proto_mobilesdk_ios_ICoreConfiguration_init_default {false, _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_MIN, 0, NULL, NULL, NULL, NULL, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_MIN, NULL, NULL, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MIN, false, 0, NULL, NULL, false, 0, false, 0, false, 0, NULL, false, 0, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_MIN, NULL, false, 0, false, 0}
  152|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_init_zero {false, _logs_proto_mobilesdk_ios_ICoreConfiguration_ConfigurationType_MIN, 0, NULL, NULL, NULL, NULL, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_PodName_MIN, NULL, NULL, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_ServiceType_MIN, false, 0, NULL, NULL, false, 0, false, 0, false, 0, NULL, false, 0, false, _logs_proto_mobilesdk_ios_ICoreConfiguration_DeploymentType_MIN, NULL, false, 0, false, 0}
  153|       |
  154|       |/* Field tags (for use in manual encoding/decoding) */
  155|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_pod_name_tag 16
  156|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_configuration_type_tag 1
  157|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_icore_version_tag 18
  158|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_sdk_version_tag 19
  159|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_sdk_service_installed_tag 7
  160|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_sdk_name_tag 20
  161|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_device_model_tag 9
  162|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_os_version_tag 22
  163|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_app_id_tag 10
  164|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_bundle_id_tag 12
  165|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_min_supported_ios_version_tag 24
  166|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_use_default_app_tag 25
  167|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_app_count_tag 21
  168|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_deployed_in_app_store_tag 26
  169|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_dynamic_framework_count_tag 27
  170|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_apple_framework_version_tag 28
  171|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_using_zip_file_tag 29
  172|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_deployment_type_tag 30
  173|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_platform_info_tag 31
  174|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_swizzling_enabled_tag 33
  175|       |#define logs_proto_mobilesdk_ios_ICoreConfiguration_using_gdt_tag 36
  176|       |
  177|       |/* Struct field encoding specification for nanopb */
  178|       |extern const pb_field_t logs_proto_mobilesdk_ios_ICoreConfiguration_fields[22];
  179|       |
  180|       |/* Maximum encoded size of messages (where known) */
  181|       |/* logs_proto_mobilesdk_ios_ICoreConfiguration_size depends on runtime parameters */
  182|       |
  183|       |/* Message IDs (where set with "msgid" option) */
  184|       |#ifdef PB_MSGID
  185|       |
  186|       |#define FIREBASECORE_MESSAGES \
  187|       |
  188|       |
  189|       |#endif
  190|       |
  191|       |/* @@protoc_insertion_point(eof) */
  192|       |
  193|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/FirebaseCoreDiagnostics/Interop/CoreDiagnostics/Public/FIRCoreDiagnosticsData.h:
    1|       |/*
    2|       | * Copyright 2019 Google
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | *      http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |#import <Foundation/Foundation.h>
   18|       |
   19|       |NS_ASSUME_NONNULL_BEGIN
   20|       |
   21|       |/** If present, is a BOOL wrapped in an NSNumber. */
   22|      0|#define kFIRCDIsDataCollectionDefaultEnabledKey @"FIRCDIsDataCollectionDefaultEnabledKey"
   23|       |
   24|       |/** If present, is an int32_t wrapped in an NSNumber. */
   25|      0|#define kFIRCDConfigurationTypeKey @"FIRCDConfigurationTypeKey"
   26|       |
   27|       |/** If present, is an NSString. */
   28|      0|#define kFIRCDSdkNameKey @"FIRCDSdkNameKey"
   29|       |
   30|       |/** If present, is an NSString. */
   31|      0|#define kFIRCDSdkVersionKey @"FIRCDSdkVersionKey"
   32|       |
   33|       |/** If present, is an int32_t wrapped in an NSNumber. */
   34|      0|#define kFIRCDllAppsCountKey @"FIRCDllAppsCountKey"
   35|       |
   36|       |/** If present, is an NSString. */
   37|      0|#define kFIRCDGoogleAppIDKey @"FIRCDGoogleAppIDKey"
   38|       |
   39|       |/** If present, is an NSString. */
   40|      0|#define kFIRCDBundleIDKey @"FIRCDBundleID"
   41|       |
   42|       |/** If present, is a BOOL wrapped in an NSNumber. */
   43|      0|#define kFIRCDUsingOptionsFromDefaultPlistKey @"FIRCDUsingOptionsFromDefaultPlistKey"
   44|       |
   45|       |/** If present, is an NSString. */
   46|      0|#define kFIRCDLibraryVersionIDKey @"FIRCDLibraryVersionIDKey"
   47|       |
   48|       |/** If present, is an NSString. */
   49|      0|#define kFIRCDFirebaseUserAgentKey @"FIRCDFirebaseUserAgentKey"
   50|       |
   51|       |/** Defines the interface of a data object needed to log diagnostics data. */
   52|       |@protocol FIRCoreDiagnosticsData <NSObject>
   53|       |
   54|       |@required
   55|       |
   56|       |/** A dictionary containing data (non-exhaustive) to be logged in diagnostics. */
   57|       |@property(nonatomic) NSDictionary<NSString *, id> *diagnosticObjects;
   58|       |
   59|       |@end
   60|       |
   61|       |NS_ASSUME_NONNULL_END

/Users/lenar/Desktop/LHypothesis/Example/Pods/GoogleDataTransport/GoogleDataTransport/GDTCORLibrary/Public/GoogleDataTransport/GDTCORConsoleLogger.h:
    1|       |/*
    2|       | * Copyright 2018 Google
    3|       | *
    4|       | * Licensed under the Apache License, Version 2.0 (the "License");
    5|       | * you may not use this file except in compliance with the License.
    6|       | * You may obtain a copy of the License at
    7|       | *
    8|       | *      http://www.apache.org/licenses/LICENSE-2.0
    9|       | *
   10|       | * Unless required by applicable law or agreed to in writing, software
   11|       | * distributed under the License is distributed on an "AS IS" BASIS,
   12|       | * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   13|       | * See the License for the specific language governing permissions and
   14|       | * limitations under the License.
   15|       | */
   16|       |
   17|       |#import <Foundation/Foundation.h>
   18|       |
   19|       |/** The current logging level. This value and higher will be printed. Declared as volatile to make
   20|       | * getting and setting atomic.
   21|       | */
   22|       |FOUNDATION_EXPORT volatile NSInteger GDTCORConsoleLoggerLoggingLevel;
   23|       |
   24|       |/** A  list of logging levels that GDT supports. */
   25|       |typedef NS_ENUM(NSInteger, GDTCORLoggingLevel) {
   26|       |
   27|       |  /** Causes all logs to be printed. */
   28|       |  GDTCORLoggingLevelDebug = 1,
   29|       |
   30|       |  /** Causes all non-debug logs to be printed. */
   31|       |  GDTCORLoggingLevelVerbose = 2,
   32|       |
   33|       |  /** Causes warnings and errors to be printed. */
   34|       |  GDTCORLoggingLevelWarnings = 3,
   35|       |
   36|       |  /** Causes errors to be printed. This is the default value. */
   37|       |  GDTCORLoggingLevelErrors = 4
   38|       |};
   39|       |
   40|       |/** A list of message codes to print in the logger that help to correspond printed messages with
   41|       | * code locations.
   42|       | *
   43|       | * Prefixes:
   44|       | * - MCD => MessageCodeDebug
   45|       | * - MCW => MessageCodeWarning
   46|       | * - MCE => MessageCodeError
   47|       | */
   48|       |typedef NS_ENUM(NSInteger, GDTCORMessageCode) {
   49|       |
   50|       |  /** For debug logs. */
   51|       |  GDTCORMCDDebugLog = 0,
   52|       |
   53|       |  /** For warning messages concerning transportBytes: not being implemented by a data object. */
   54|       |  GDTCORMCWDataObjectMissingBytesImpl = 1,
   55|       |
   56|       |  /** For warning messages concerning a failed event upload. */
   57|       |  GDTCORMCWUploadFailed = 2,
   58|       |
   59|       |  /** For warning messages concerning a forced event upload. */
   60|       |  GDTCORMCWForcedUpload = 3,
   61|       |
   62|       |  /** For warning messages concerning a failed reachability call. */
   63|       |  GDTCORMCWReachabilityFailed = 4,
   64|       |
   65|       |  /** For warning messages concerning a database warning. */
   66|       |  GDTCORMCWDatabaseWarning = 5,
   67|       |
   68|       |  /** For warning messages concerning the reading of a event file. */
   69|       |  GDTCORMCWFileReadError = 6,
   70|       |
   71|       |  /** For error messages concerning transformGDTEvent: not being implemented by an event
   72|       |     transformer. */
   73|       |  GDTCORMCETransformerDoesntImplementTransform = 1000,
   74|       |
   75|       |  /** For error messages concerning the creation of a directory failing. */
   76|       |  GDTCORMCEDirectoryCreationError = 1001,
   77|       |
   78|       |  /** For error messages concerning the writing of a event file. */
   79|       |  GDTCORMCEFileWriteError = 1002,
   80|       |
   81|       |  /** For error messages concerning the lack of a prioritizer for a given backend. */
   82|       |  GDTCORMCEPrioritizerError = 1003,
   83|       |
   84|       |  /** For error messages concerning a package delivery API violation. */
   85|       |  GDTCORMCEDeliverTwice = 1004,
   86|       |
   87|       |  /** For error messages concerning an error in an implementation of -transportBytes. */
   88|       |  GDTCORMCETransportBytesError = 1005,
   89|       |
   90|       |  /** For general purpose error messages in a dependency. */
   91|       |  GDTCORMCEGeneralError = 1006,
   92|       |
   93|       |  /** For fatal errors. Please go to https://github.com/firebase/firebase-ios-sdk/issues and open
   94|       |   * an issue if you encounter an error with this code.
   95|       |   */
   96|       |  GDTCORMCEFatalAssertion = 1007,
   97|       |
   98|       |  /** For error messages concerning the reading of a event file. */
   99|       |  GDTCORMCEFileReadError = 1008,
  100|       |
  101|       |  /** For errors related to running sqlite. */
  102|       |  GDTCORMCEDatabaseError = 1009,
  103|       |};
  104|       |
  105|       |/** Prints the given code and format string to the console.
  106|       | *
  107|       | * @param code The message code describing the nature of the log.
  108|       | * @param logLevel The log level of this log.
  109|       | * @param format The format string.
  110|       | */
  111|       |FOUNDATION_EXPORT
  112|       |void GDTCORLog(GDTCORMessageCode code, GDTCORLoggingLevel logLevel, NSString *_Nonnull format, ...)
  113|       |    NS_FORMAT_FUNCTION(3, 4);
  114|       |
  115|       |/** Prints an assert log to the console.
  116|       | *
  117|       | * @param wasFatal Send YES if the assertion should be fatal, NO otherwise.
  118|       | * @param file The file in which the failure occurred.
  119|       | * @param line The line number of the failure.
  120|       | * @param format The format string.
  121|       | */
  122|       |FOUNDATION_EXPORT void GDTCORLogAssert(BOOL wasFatal,
  123|       |                                       NSString *_Nonnull file,
  124|       |                                       NSInteger line,
  125|       |                                       NSString *_Nullable format,
  126|       |                                       ...) NS_FORMAT_FUNCTION(4, 5);
  127|       |
  128|       |/** Returns the string that represents some message code.
  129|       | *
  130|       | * @param code The code to convert to a string.
  131|       | * @return The string representing the message code.
  132|       | */
  133|       |FOUNDATION_EXPORT NSString *_Nonnull GDTCORMessageCodeEnumToString(GDTCORMessageCode code);
  134|       |
  135|       |#define GDTCORLogDebug(MESSAGE_FORMAT, ...) \
  136|       |  GDTCORLog(GDTCORMCDDebugLog, GDTCORLoggingLevelDebug, MESSAGE_FORMAT, __VA_ARGS__);
  137|       |
  138|       |// A define to wrap GULLogWarning with slightly more convenient usage.
  139|       |#define GDTCORLogWarning(MESSAGE_CODE, MESSAGE_FORMAT, ...) \
  140|       |  GDTCORLog(MESSAGE_CODE, GDTCORLoggingLevelWarnings, MESSAGE_FORMAT, __VA_ARGS__);
  141|       |
  142|       |// A define to wrap GULLogError with slightly more convenient usage and a failing assert.
  143|       |#define GDTCORLogError(MESSAGE_CODE, MESSAGE_FORMAT, ...) \
  144|      0|  GDTCORLog(MESSAGE_CODE, GDTCORLoggingLevelErrors, MESSAGE_FORMAT, __VA_ARGS__);

/Users/lenar/Desktop/LHypothesis/Example/Pods/nanopb/pb.h:
    1|       |/* Common parts of the nanopb library. Most of these are quite low-level
    2|       | * stuff. For the high-level interface, see pb_encode.h and pb_decode.h.
    3|       | */
    4|       |
    5|       |#ifndef PB_H_INCLUDED
    6|       |#define PB_H_INCLUDED
    7|       |
    8|       |/*****************************************************************
    9|       | * Nanopb compilation time options. You can change these here by *
   10|       | * uncommenting the lines, or on the compiler command line.      *
   11|       | *****************************************************************/
   12|       |
   13|       |/* Enable support for dynamically allocated fields */
   14|       |/* #define PB_ENABLE_MALLOC 1 */
   15|       |
   16|       |/* Define this if your CPU / compiler combination does not support
   17|       | * unaligned memory access to packed structures. */
   18|       |/* #define PB_NO_PACKED_STRUCTS 1 */
   19|       |
   20|       |/* Increase the number of required fields that are tracked.
   21|       | * A compiler warning will tell if you need this. */
   22|       |/* #define PB_MAX_REQUIRED_FIELDS 256 */
   23|       |
   24|       |/* Add support for tag numbers > 255 and fields larger than 255 bytes. */
   25|       |/* #define PB_FIELD_16BIT 1 */
   26|       |
   27|       |/* Add support for tag numbers > 65536 and fields larger than 65536 bytes. */
   28|       |/* #define PB_FIELD_32BIT 1 */
   29|       |
   30|       |/* Disable support for error messages in order to save some code space. */
   31|       |/* #define PB_NO_ERRMSG 1 */
   32|       |
   33|       |/* Disable support for custom streams (support only memory buffers). */
   34|       |/* #define PB_BUFFER_ONLY 1 */
   35|       |
   36|       |/* Switch back to the old-style callback function signature.
   37|       | * This was the default until nanopb-0.2.1. */
   38|       |/* #define PB_OLD_CALLBACK_STYLE */
   39|       |
   40|       |
   41|       |/* Don't encode scalar arrays as packed. This is only to be used when
   42|       | * the decoder on the receiving side cannot process packed scalar arrays.
   43|       | * Such example is older protobuf.js. */
   44|       |/* #define PB_ENCODE_ARRAYS_UNPACKED 1 */
   45|       |
   46|       |/******************************************************************
   47|       | * You usually don't need to change anything below this line.     *
   48|       | * Feel free to look around and use the defined macros, though.   *
   49|       | ******************************************************************/
   50|       |
   51|       |
   52|       |/* Version of the nanopb library. Just in case you want to check it in
   53|       | * your own program. */
   54|       |#define NANOPB_VERSION nanopb-0.3.9.8
   55|       |
   56|       |/* Include all the system headers needed by nanopb. You will need the
   57|       | * definitions of the following:
   58|       | * - strlen, memcpy, memset functions
   59|       | * - [u]int_least8_t, uint_fast8_t, [u]int_least16_t, [u]int32_t, [u]int64_t
   60|       | * - size_t
   61|       | * - bool
   62|       | *
   63|       | * If you don't have the standard header files, you can instead provide
   64|       | * a custom header that defines or includes all this. In that case,
   65|       | * define PB_SYSTEM_HEADER to the path of this file.
   66|       | */
   67|       |#ifdef PB_SYSTEM_HEADER
   68|       |#include PB_SYSTEM_HEADER
   69|       |#else
   70|       |#include <stdint.h>
   71|       |#include <stddef.h>
   72|       |#include <stdbool.h>
   73|       |#include <string.h>
   74|       |
   75|       |#ifdef PB_ENABLE_MALLOC
   76|       |#include <stdlib.h>
   77|       |#endif
   78|       |#endif
   79|       |
   80|       |/* Macro for defining packed structures (compiler dependent).
   81|       | * This just reduces memory requirements, but is not required.
   82|       | */
   83|       |#if defined(PB_NO_PACKED_STRUCTS)
   84|       |    /* Disable struct packing */
   85|       |#   define PB_PACKED_STRUCT_START
   86|       |#   define PB_PACKED_STRUCT_END
   87|       |#   define pb_packed
   88|       |#elif defined(__GNUC__) || defined(__clang__)
   89|       |    /* For GCC and clang */
   90|       |#   define PB_PACKED_STRUCT_START
   91|       |#   define PB_PACKED_STRUCT_END
   92|       |#   define pb_packed __attribute__((packed))
   93|       |#elif defined(__ICCARM__) || defined(__CC_ARM)
   94|       |    /* For IAR ARM and Keil MDK-ARM compilers */
   95|       |#   define PB_PACKED_STRUCT_START _Pragma("pack(push, 1)")
   96|       |#   define PB_PACKED_STRUCT_END _Pragma("pack(pop)")
   97|       |#   define pb_packed
   98|       |#elif defined(_MSC_VER) && (_MSC_VER >= 1500)
   99|       |    /* For Microsoft Visual C++ */
  100|       |#   define PB_PACKED_STRUCT_START __pragma(pack(push, 1))
  101|       |#   define PB_PACKED_STRUCT_END __pragma(pack(pop))
  102|       |#   define pb_packed
  103|       |#else
  104|       |    /* Unknown compiler */
  105|       |#   define PB_PACKED_STRUCT_START
  106|       |#   define PB_PACKED_STRUCT_END
  107|       |#   define pb_packed
  108|       |#endif
  109|       |
  110|       |/* Handly macro for suppressing unreferenced-parameter compiler warnings. */
  111|       |#ifndef PB_UNUSED
  112|       |#define PB_UNUSED(x) (void)(x)
  113|       |#endif
  114|       |
  115|       |/* Compile-time assertion, used for checking compatible compilation options.
  116|       | * If this does not work properly on your compiler, use
  117|       | * #define PB_NO_STATIC_ASSERT to disable it.
  118|       | *
  119|       | * But before doing that, check carefully the error message / place where it
  120|       | * comes from to see if the error has a real cause. Unfortunately the error
  121|       | * message is not always very clear to read, but you can see the reason better
  122|       | * in the place where the PB_STATIC_ASSERT macro was called.
  123|       | */
  124|       |#ifndef PB_NO_STATIC_ASSERT
  125|       |#ifndef PB_STATIC_ASSERT
  126|       |#define PB_STATIC_ASSERT(COND,MSG) typedef char PB_STATIC_ASSERT_MSG(MSG, __LINE__, __COUNTER__)[(COND)?1:-1];
  127|       |#define PB_STATIC_ASSERT_MSG(MSG, LINE, COUNTER) PB_STATIC_ASSERT_MSG_(MSG, LINE, COUNTER)
  128|       |#define PB_STATIC_ASSERT_MSG_(MSG, LINE, COUNTER) pb_static_assertion_##MSG##LINE##COUNTER
  129|       |#endif
  130|       |#else
  131|       |#define PB_STATIC_ASSERT(COND,MSG)
  132|       |#endif
  133|       |
  134|       |/* Number of required fields to keep track of. */
  135|       |#ifndef PB_MAX_REQUIRED_FIELDS
  136|       |#define PB_MAX_REQUIRED_FIELDS 64
  137|       |#endif
  138|       |
  139|       |#if PB_MAX_REQUIRED_FIELDS < 64
  140|       |#error You should not lower PB_MAX_REQUIRED_FIELDS from the default value (64).
  141|       |#endif
  142|       |
  143|       |/* List of possible field types. These are used in the autogenerated code.
  144|       | * Least-significant 4 bits tell the scalar type
  145|       | * Most-significant 4 bits specify repeated/required/packed etc.
  146|       | */
  147|       |
  148|       |typedef uint_least8_t pb_type_t;
  149|       |
  150|       |/**** Field data types ****/
  151|       |
  152|       |/* Numeric types */
  153|       |#define PB_LTYPE_BOOL    0x00 /* bool */
  154|       |#define PB_LTYPE_VARINT  0x01 /* int32, int64, enum, bool */
  155|       |#define PB_LTYPE_UVARINT 0x02 /* uint32, uint64 */
  156|       |#define PB_LTYPE_SVARINT 0x03 /* sint32, sint64 */
  157|       |#define PB_LTYPE_FIXED32 0x04 /* fixed32, sfixed32, float */
  158|       |#define PB_LTYPE_FIXED64 0x05 /* fixed64, sfixed64, double */
  159|       |
  160|       |/* Marker for last packable field type. */
  161|       |#define PB_LTYPE_LAST_PACKABLE 0x05
  162|       |
  163|       |/* Byte array with pre-allocated buffer.
  164|       | * data_size is the length of the allocated PB_BYTES_ARRAY structure. */
  165|       |#define PB_LTYPE_BYTES 0x06
  166|       |
  167|       |/* String with pre-allocated buffer.
  168|       | * data_size is the maximum length. */
  169|       |#define PB_LTYPE_STRING 0x07
  170|       |
  171|       |/* Submessage
  172|       | * submsg_fields is pointer to field descriptions */
  173|       |#define PB_LTYPE_SUBMESSAGE 0x08
  174|       |
  175|       |/* Extension pseudo-field
  176|       | * The field contains a pointer to pb_extension_t */
  177|       |#define PB_LTYPE_EXTENSION 0x09
  178|       |
  179|       |/* Byte array with inline, pre-allocated byffer.
  180|       | * data_size is the length of the inline, allocated buffer.
  181|       | * This differs from PB_LTYPE_BYTES by defining the element as
  182|       | * pb_byte_t[data_size] rather than pb_bytes_array_t. */
  183|       |#define PB_LTYPE_FIXED_LENGTH_BYTES 0x0A
  184|       |
  185|       |/* Number of declared LTYPES */
  186|       |#define PB_LTYPES_COUNT 0x0B
  187|       |#define PB_LTYPE_MASK 0x0F
  188|       |
  189|       |/**** Field repetition rules ****/
  190|       |
  191|       |#define PB_HTYPE_REQUIRED 0x00
  192|       |#define PB_HTYPE_OPTIONAL 0x10
  193|       |#define PB_HTYPE_REPEATED 0x20
  194|       |#define PB_HTYPE_ONEOF    0x30
  195|       |#define PB_HTYPE_MASK     0x30
  196|       |
  197|       |/**** Field allocation types ****/
  198|       | 
  199|       |#define PB_ATYPE_STATIC   0x00
  200|       |#define PB_ATYPE_POINTER  0x80
  201|       |#define PB_ATYPE_CALLBACK 0x40
  202|       |#define PB_ATYPE_MASK     0xC0
  203|       |
  204|       |#define PB_ATYPE(x) ((x) & PB_ATYPE_MASK)
  205|       |#define PB_HTYPE(x) ((x) & PB_HTYPE_MASK)
  206|       |#define PB_LTYPE(x) ((x) & PB_LTYPE_MASK)
  207|       |
  208|       |/* Data type used for storing sizes of struct fields
  209|       | * and array counts.
  210|       | */
  211|       |#if defined(PB_FIELD_32BIT)
  212|       |    typedef uint32_t pb_size_t;
  213|       |    typedef int32_t pb_ssize_t;
  214|       |#elif defined(PB_FIELD_16BIT)
  215|       |    typedef uint_least16_t pb_size_t;
  216|       |    typedef int_least16_t pb_ssize_t;
  217|       |#else
  218|       |    typedef uint_least8_t pb_size_t;
  219|       |    typedef int_least8_t pb_ssize_t;
  220|       |#endif
  221|       |#define PB_SIZE_MAX ((pb_size_t)-1)
  222|       |
  223|       |/* Data type for storing encoded data and other byte streams.
  224|       | * This typedef exists to support platforms where uint8_t does not exist.
  225|       | * You can regard it as equivalent on uint8_t on other platforms.
  226|       | */
  227|       |typedef uint_least8_t pb_byte_t;
  228|       |
  229|       |/* This structure is used in auto-generated constants
  230|       | * to specify struct fields.
  231|       | * You can change field sizes if you need structures
  232|       | * larger than 256 bytes or field tags larger than 256.
  233|       | * The compiler should complain if your .proto has such
  234|       | * structures. Fix that by defining PB_FIELD_16BIT or
  235|       | * PB_FIELD_32BIT.
  236|       | */
  237|       |PB_PACKED_STRUCT_START
  238|       |typedef struct pb_field_s pb_field_t;
  239|       |struct pb_field_s {
  240|       |    pb_size_t tag;
  241|       |    pb_type_t type;
  242|       |    pb_size_t data_offset; /* Offset of field data, relative to previous field. */
  243|       |    pb_ssize_t size_offset; /* Offset of array size or has-boolean, relative to data */
  244|       |    pb_size_t data_size; /* Data size in bytes for a single item */
  245|       |    pb_size_t array_size; /* Maximum number of entries in array */
  246|       |    
  247|       |    /* Field definitions for submessage
  248|       |     * OR default value for all other non-array, non-callback types
  249|       |     * If null, then field will zeroed. */
  250|       |    const void *ptr;
  251|       |} pb_packed;
  252|       |PB_PACKED_STRUCT_END
  253|       |
  254|       |/* Make sure that the standard integer types are of the expected sizes.
  255|       | * Otherwise fixed32/fixed64 fields can break.
  256|       | *
  257|       | * If you get errors here, it probably means that your stdint.h is not
  258|       | * correct for your platform.
  259|       | */
  260|       |#ifndef PB_WITHOUT_64BIT
  261|       |PB_STATIC_ASSERT(sizeof(int64_t) == 2 * sizeof(int32_t), INT64_T_WRONG_SIZE)
  262|       |PB_STATIC_ASSERT(sizeof(uint64_t) == 2 * sizeof(uint32_t), UINT64_T_WRONG_SIZE)
  263|       |#endif
  264|       |
  265|       |/* This structure is used for 'bytes' arrays.
  266|       | * It has the number of bytes in the beginning, and after that an array.
  267|       | * Note that actual structs used will have a different length of bytes array.
  268|       | */
  269|       |#define PB_BYTES_ARRAY_T(n) struct { pb_size_t size; pb_byte_t bytes[n]; }
  270|      0|#define PB_BYTES_ARRAY_T_ALLOCSIZE(n) ((size_t)n + offsetof(pb_bytes_array_t, bytes))
  271|       |
  272|       |struct pb_bytes_array_s {
  273|       |    pb_size_t size;
  274|       |    pb_byte_t bytes[1];
  275|       |};
  276|       |typedef struct pb_bytes_array_s pb_bytes_array_t;
  277|       |
  278|       |/* This structure is used for giving the callback function.
  279|       | * It is stored in the message structure and filled in by the method that
  280|       | * calls pb_decode.
  281|       | *
  282|       | * The decoding callback will be given a limited-length stream
  283|       | * If the wire type was string, the length is the length of the string.
  284|       | * If the wire type was a varint/fixed32/fixed64, the length is the length
  285|       | * of the actual value.
  286|       | * The function may be called multiple times (especially for repeated types,
  287|       | * but also otherwise if the message happens to contain the field multiple
  288|       | * times.)
  289|       | *
  290|       | * The encoding callback will receive the actual output stream.
  291|       | * It should write all the data in one call, including the field tag and
  292|       | * wire type. It can write multiple fields.
  293|       | *
  294|       | * The callback can be null if you want to skip a field.
  295|       | */
  296|       |typedef struct pb_istream_s pb_istream_t;
  297|       |typedef struct pb_ostream_s pb_ostream_t;
  298|       |typedef struct pb_callback_s pb_callback_t;
  299|       |struct pb_callback_s {
  300|       |#ifdef PB_OLD_CALLBACK_STYLE
  301|       |    /* Deprecated since nanopb-0.2.1 */
  302|       |    union {
  303|       |        bool (*decode)(pb_istream_t *stream, const pb_field_t *field, void *arg);
  304|       |        bool (*encode)(pb_ostream_t *stream, const pb_field_t *field, const void *arg);
  305|       |    } funcs;
  306|       |#else
  307|       |    /* New function signature, which allows modifying arg contents in callback. */
  308|       |    union {
  309|       |        bool (*decode)(pb_istream_t *stream, const pb_field_t *field, void **arg);
  310|       |        bool (*encode)(pb_ostream_t *stream, const pb_field_t *field, void * const *arg);
  311|       |    } funcs;
  312|       |#endif    
  313|       |    
  314|       |    /* Free arg for use by callback */
  315|       |    void *arg;
  316|       |};
  317|       |
  318|       |/* Wire types. Library user needs these only in encoder callbacks. */
  319|       |typedef enum {
  320|       |    PB_WT_VARINT = 0,
  321|       |    PB_WT_64BIT  = 1,
  322|       |    PB_WT_STRING = 2,
  323|       |    PB_WT_32BIT  = 5
  324|       |} pb_wire_type_t;
  325|       |
  326|       |/* Structure for defining the handling of unknown/extension fields.
  327|       | * Usually the pb_extension_type_t structure is automatically generated,
  328|       | * while the pb_extension_t structure is created by the user. However,
  329|       | * if you want to catch all unknown fields, you can also create a custom
  330|       | * pb_extension_type_t with your own callback.
  331|       | */
  332|       |typedef struct pb_extension_type_s pb_extension_type_t;
  333|       |typedef struct pb_extension_s pb_extension_t;
  334|       |struct pb_extension_type_s {
  335|       |    /* Called for each unknown field in the message.
  336|       |     * If you handle the field, read off all of its data and return true.
  337|       |     * If you do not handle the field, do not read anything and return true.
  338|       |     * If you run into an error, return false.
  339|       |     * Set to NULL for default handler.
  340|       |     */
  341|       |    bool (*decode)(pb_istream_t *stream, pb_extension_t *extension,
  342|       |                   uint32_t tag, pb_wire_type_t wire_type);
  343|       |    
  344|       |    /* Called once after all regular fields have been encoded.
  345|       |     * If you have something to write, do so and return true.
  346|       |     * If you do not have anything to write, just return true.
  347|       |     * If you run into an error, return false.
  348|       |     * Set to NULL for default handler.
  349|       |     */
  350|       |    bool (*encode)(pb_ostream_t *stream, const pb_extension_t *extension);
  351|       |    
  352|       |    /* Free field for use by the callback. */
  353|       |    const void *arg;
  354|       |};
  355|       |
  356|       |struct pb_extension_s {
  357|       |    /* Type describing the extension field. Usually you'll initialize
  358|       |     * this to a pointer to the automatically generated structure. */
  359|       |    const pb_extension_type_t *type;
  360|       |    
  361|       |    /* Destination for the decoded data. This must match the datatype
  362|       |     * of the extension field. */
  363|       |    void *dest;
  364|       |    
  365|       |    /* Pointer to the next extension handler, or NULL.
  366|       |     * If this extension does not match a field, the next handler is
  367|       |     * automatically called. */
  368|       |    pb_extension_t *next;
  369|       |
  370|       |    /* The decoder sets this to true if the extension was found.
  371|       |     * Ignored for encoding. */
  372|       |    bool found;
  373|       |};
  374|       |
  375|       |/* Memory allocation functions to use. You can define pb_realloc and
  376|       | * pb_free to custom functions if you want. */
  377|       |#ifdef PB_ENABLE_MALLOC
  378|       |#   ifndef pb_realloc
  379|       |#       define pb_realloc(ptr, size) realloc(ptr, size)
  380|       |#   endif
  381|       |#   ifndef pb_free
  382|       |#       define pb_free(ptr) free(ptr)
  383|       |#   endif
  384|       |#endif
  385|       |
  386|       |/* This is used to inform about need to regenerate .pb.h/.pb.c files. */
  387|       |#define PB_PROTO_HEADER_VERSION 30
  388|       |
  389|       |/* These macros are used to declare pb_field_t's in the constant array. */
  390|       |/* Size of a structure member, in bytes. */
  391|       |#define pb_membersize(st, m) (sizeof ((st*)0)->m)
  392|       |/* Number of entries in an array. */
  393|       |#define pb_arraysize(st, m) (pb_membersize(st, m) / pb_membersize(st, m[0]))
  394|       |/* Delta from start of one member to the start of another member. */
  395|       |#define pb_delta(st, m1, m2) ((int)offsetof(st, m1) - (int)offsetof(st, m2))
  396|       |/* Marks the end of the field list */
  397|       |#define PB_LAST_FIELD {0,(pb_type_t) 0,0,0,0,0,0}
  398|       |
  399|       |/* Macros for filling in the data_offset field */
  400|       |/* data_offset for first field in a message */
  401|       |#define PB_DATAOFFSET_FIRST(st, m1, m2) (offsetof(st, m1))
  402|       |/* data_offset for subsequent fields */
  403|       |#define PB_DATAOFFSET_OTHER(st, m1, m2) (offsetof(st, m1) - offsetof(st, m2) - pb_membersize(st, m2))
  404|       |/* data offset for subsequent fields inside an union (oneof) */
  405|       |#define PB_DATAOFFSET_UNION(st, m1, m2) (PB_SIZE_MAX)
  406|       |/* Choose first/other based on m1 == m2 (deprecated, remains for backwards compatibility) */
  407|       |#define PB_DATAOFFSET_CHOOSE(st, m1, m2) (int)(offsetof(st, m1) == offsetof(st, m2) \
  408|       |                                  ? PB_DATAOFFSET_FIRST(st, m1, m2) \
  409|       |                                  : PB_DATAOFFSET_OTHER(st, m1, m2))
  410|       |
  411|       |/* Required fields are the simplest. They just have delta (padding) from
  412|       | * previous field end, and the size of the field. Pointer is used for
  413|       | * submessages and default values.
  414|       | */
  415|       |#define PB_REQUIRED_STATIC(tag, st, m, fd, ltype, ptr) \
  416|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_REQUIRED | ltype, \
  417|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  418|       |
  419|       |/* Optional fields add the delta to the has_ variable. */
  420|       |#define PB_OPTIONAL_STATIC(tag, st, m, fd, ltype, ptr) \
  421|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_OPTIONAL | ltype, \
  422|       |    fd, \
  423|       |    pb_delta(st, has_ ## m, m), \
  424|       |    pb_membersize(st, m), 0, ptr}
  425|       |
  426|       |#define PB_SINGULAR_STATIC(tag, st, m, fd, ltype, ptr) \
  427|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_OPTIONAL | ltype, \
  428|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  429|       |
  430|       |/* Repeated fields have a _count field and also the maximum number of entries. */
  431|       |#define PB_REPEATED_STATIC(tag, st, m, fd, ltype, ptr) \
  432|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_REPEATED | ltype, \
  433|       |    fd, \
  434|       |    pb_delta(st, m ## _count, m), \
  435|       |    pb_membersize(st, m[0]), \
  436|       |    pb_arraysize(st, m), ptr}
  437|       |
  438|       |/* Allocated fields carry the size of the actual data, not the pointer */
  439|       |#define PB_REQUIRED_POINTER(tag, st, m, fd, ltype, ptr) \
  440|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_REQUIRED | ltype, \
  441|       |    fd, 0, pb_membersize(st, m[0]), 0, ptr}
  442|       |
  443|       |/* Optional fields don't need a has_ variable, as information would be redundant */
  444|       |#define PB_OPTIONAL_POINTER(tag, st, m, fd, ltype, ptr) \
  445|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_OPTIONAL | ltype, \
  446|       |    fd, 0, pb_membersize(st, m[0]), 0, ptr}
  447|       |
  448|       |/* Same as optional fields*/
  449|       |#define PB_SINGULAR_POINTER(tag, st, m, fd, ltype, ptr) \
  450|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_OPTIONAL | ltype, \
  451|       |    fd, 0, pb_membersize(st, m[0]), 0, ptr}
  452|       |
  453|       |/* Repeated fields have a _count field and a pointer to array of pointers */
  454|       |#define PB_REPEATED_POINTER(tag, st, m, fd, ltype, ptr) \
  455|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_REPEATED | ltype, \
  456|       |    fd, pb_delta(st, m ## _count, m), \
  457|       |    pb_membersize(st, m[0]), 0, ptr}
  458|       |
  459|       |/* Callbacks are much like required fields except with special datatype. */
  460|       |#define PB_REQUIRED_CALLBACK(tag, st, m, fd, ltype, ptr) \
  461|       |    {tag, PB_ATYPE_CALLBACK | PB_HTYPE_REQUIRED | ltype, \
  462|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  463|       |
  464|       |#define PB_OPTIONAL_CALLBACK(tag, st, m, fd, ltype, ptr) \
  465|       |    {tag, PB_ATYPE_CALLBACK | PB_HTYPE_OPTIONAL | ltype, \
  466|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  467|       |
  468|       |#define PB_SINGULAR_CALLBACK(tag, st, m, fd, ltype, ptr) \
  469|       |    {tag, PB_ATYPE_CALLBACK | PB_HTYPE_OPTIONAL | ltype, \
  470|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  471|       |    
  472|       |#define PB_REPEATED_CALLBACK(tag, st, m, fd, ltype, ptr) \
  473|       |    {tag, PB_ATYPE_CALLBACK | PB_HTYPE_REPEATED | ltype, \
  474|       |    fd, 0, pb_membersize(st, m), 0, ptr}
  475|       |
  476|       |/* Optional extensions don't have the has_ field, as that would be redundant.
  477|       | * Furthermore, the combination of OPTIONAL without has_ field is used
  478|       | * for indicating proto3 style fields. Extensions exist in proto2 mode only,
  479|       | * so they should be encoded according to proto2 rules. To avoid the conflict,
  480|       | * extensions are marked as REQUIRED instead.
  481|       | */
  482|       |#define PB_OPTEXT_STATIC(tag, st, m, fd, ltype, ptr) \
  483|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_REQUIRED | ltype, \
  484|       |    0, \
  485|       |    0, \
  486|       |    pb_membersize(st, m), 0, ptr}
  487|       |
  488|       |#define PB_OPTEXT_POINTER(tag, st, m, fd, ltype, ptr) \
  489|       |    PB_OPTIONAL_POINTER(tag, st, m, fd, ltype, ptr)
  490|       |
  491|       |#define PB_OPTEXT_CALLBACK(tag, st, m, fd, ltype, ptr) \
  492|       |    PB_OPTIONAL_CALLBACK(tag, st, m, fd, ltype, ptr)
  493|       |
  494|       |/* The mapping from protobuf types to LTYPEs is done using these macros. */
  495|       |#define PB_LTYPE_MAP_BOOL               PB_LTYPE_BOOL
  496|       |#define PB_LTYPE_MAP_BYTES              PB_LTYPE_BYTES
  497|       |#define PB_LTYPE_MAP_DOUBLE             PB_LTYPE_FIXED64
  498|       |#define PB_LTYPE_MAP_ENUM               PB_LTYPE_VARINT
  499|       |#define PB_LTYPE_MAP_UENUM              PB_LTYPE_UVARINT
  500|       |#define PB_LTYPE_MAP_FIXED32            PB_LTYPE_FIXED32
  501|       |#define PB_LTYPE_MAP_FIXED64            PB_LTYPE_FIXED64
  502|       |#define PB_LTYPE_MAP_FLOAT              PB_LTYPE_FIXED32
  503|       |#define PB_LTYPE_MAP_INT32              PB_LTYPE_VARINT
  504|       |#define PB_LTYPE_MAP_INT64              PB_LTYPE_VARINT
  505|       |#define PB_LTYPE_MAP_MESSAGE            PB_LTYPE_SUBMESSAGE
  506|       |#define PB_LTYPE_MAP_SFIXED32           PB_LTYPE_FIXED32
  507|       |#define PB_LTYPE_MAP_SFIXED64           PB_LTYPE_FIXED64
  508|       |#define PB_LTYPE_MAP_SINT32             PB_LTYPE_SVARINT
  509|       |#define PB_LTYPE_MAP_SINT64             PB_LTYPE_SVARINT
  510|       |#define PB_LTYPE_MAP_STRING             PB_LTYPE_STRING
  511|       |#define PB_LTYPE_MAP_UINT32             PB_LTYPE_UVARINT
  512|       |#define PB_LTYPE_MAP_UINT64             PB_LTYPE_UVARINT
  513|       |#define PB_LTYPE_MAP_EXTENSION          PB_LTYPE_EXTENSION
  514|       |#define PB_LTYPE_MAP_FIXED_LENGTH_BYTES PB_LTYPE_FIXED_LENGTH_BYTES
  515|       |
  516|       |/* This is the actual macro used in field descriptions.
  517|       | * It takes these arguments:
  518|       | * - Field tag number
  519|       | * - Field type:   BOOL, BYTES, DOUBLE, ENUM, UENUM, FIXED32, FIXED64,
  520|       | *                 FLOAT, INT32, INT64, MESSAGE, SFIXED32, SFIXED64
  521|       | *                 SINT32, SINT64, STRING, UINT32, UINT64 or EXTENSION
  522|       | * - Field rules:  REQUIRED, OPTIONAL or REPEATED
  523|       | * - Allocation:   STATIC, CALLBACK or POINTER
  524|       | * - Placement: FIRST or OTHER, depending on if this is the first field in structure.
  525|       | * - Message name
  526|       | * - Field name
  527|       | * - Previous field name (or field name again for first field)
  528|       | * - Pointer to default value or submsg fields.
  529|       | */
  530|       |
  531|       |#define PB_FIELD(tag, type, rules, allocation, placement, message, field, prevfield, ptr) \
  532|       |        PB_ ## rules ## _ ## allocation(tag, message, field, \
  533|       |        PB_DATAOFFSET_ ## placement(message, field, prevfield), \
  534|       |        PB_LTYPE_MAP_ ## type, ptr)
  535|       |
  536|       |/* Field description for repeated static fixed count fields.*/
  537|       |#define PB_REPEATED_FIXED_COUNT(tag, type, placement, message, field, prevfield, ptr) \
  538|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_REPEATED | PB_LTYPE_MAP_ ## type, \
  539|       |    PB_DATAOFFSET_ ## placement(message, field, prevfield), \
  540|       |    0, \
  541|       |    pb_membersize(message, field[0]), \
  542|       |    pb_arraysize(message, field), ptr}
  543|       |
  544|       |/* Field description for oneof fields. This requires taking into account the
  545|       | * union name also, that's why a separate set of macros is needed.
  546|       | */
  547|       |#define PB_ONEOF_STATIC(u, tag, st, m, fd, ltype, ptr) \
  548|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_ONEOF | ltype, \
  549|       |    fd, pb_delta(st, which_ ## u, u.m), \
  550|       |    pb_membersize(st, u.m), 0, ptr}
  551|       |
  552|       |#define PB_ONEOF_POINTER(u, tag, st, m, fd, ltype, ptr) \
  553|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_ONEOF | ltype, \
  554|       |    fd, pb_delta(st, which_ ## u, u.m), \
  555|       |    pb_membersize(st, u.m[0]), 0, ptr}
  556|       |
  557|       |#define PB_ONEOF_FIELD(union_name, tag, type, rules, allocation, placement, message, field, prevfield, ptr) \
  558|       |        PB_ONEOF_ ## allocation(union_name, tag, message, field, \
  559|       |        PB_DATAOFFSET_ ## placement(message, union_name.field, prevfield), \
  560|       |        PB_LTYPE_MAP_ ## type, ptr)
  561|       |
  562|       |#define PB_ANONYMOUS_ONEOF_STATIC(u, tag, st, m, fd, ltype, ptr) \
  563|       |    {tag, PB_ATYPE_STATIC | PB_HTYPE_ONEOF | ltype, \
  564|       |    fd, pb_delta(st, which_ ## u, m), \
  565|       |    pb_membersize(st, m), 0, ptr}
  566|       |
  567|       |#define PB_ANONYMOUS_ONEOF_POINTER(u, tag, st, m, fd, ltype, ptr) \
  568|       |    {tag, PB_ATYPE_POINTER | PB_HTYPE_ONEOF | ltype, \
  569|       |    fd, pb_delta(st, which_ ## u, m), \
  570|       |    pb_membersize(st, m[0]), 0, ptr}
  571|       |
  572|       |#define PB_ANONYMOUS_ONEOF_FIELD(union_name, tag, type, rules, allocation, placement, message, field, prevfield, ptr) \
  573|       |        PB_ANONYMOUS_ONEOF_ ## allocation(union_name, tag, message, field, \
  574|       |        PB_DATAOFFSET_ ## placement(message, field, prevfield), \
  575|       |        PB_LTYPE_MAP_ ## type, ptr)
  576|       |
  577|       |/* These macros are used for giving out error messages.
  578|       | * They are mostly a debugging aid; the main error information
  579|       | * is the true/false return value from functions.
  580|       | * Some code space can be saved by disabling the error
  581|       | * messages if not used.
  582|       | *
  583|       | * PB_SET_ERROR() sets the error message if none has been set yet.
  584|       | *                msg must be a constant string literal.
  585|       | * PB_GET_ERROR() always returns a pointer to a string.
  586|       | * PB_RETURN_ERROR() sets the error and returns false from current
  587|       | *                   function.
  588|       | */
  589|       |#ifdef PB_NO_ERRMSG
  590|       |#define PB_SET_ERROR(stream, msg) PB_UNUSED(stream)
  591|       |#define PB_GET_ERROR(stream) "(errmsg disabled)"
  592|       |#else
  593|       |#define PB_SET_ERROR(stream, msg) (stream->errmsg = (stream)->errmsg ? (stream)->errmsg : (msg))
  594|       |#define PB_GET_ERROR(stream) ((stream)->errmsg ? (stream)->errmsg : "(none)")
  595|       |#endif
  596|       |
  597|       |#define PB_RETURN_ERROR(stream, msg) return PB_SET_ERROR(stream, msg), false
  598|       |
  599|       |#endif

/Users/lenar/Desktop/LHypothesis/Example/Pods/nanopb/pb_encode.h:
    1|       |/* pb_encode.h: Functions to encode protocol buffers. Depends on pb_encode.c.
    2|       | * The main function is pb_encode. You also need an output stream, and the
    3|       | * field descriptions created by nanopb_generator.py.
    4|       | */
    5|       |
    6|       |#ifndef PB_ENCODE_H_INCLUDED
    7|       |#define PB_ENCODE_H_INCLUDED
    8|       |
    9|       |#include "pb.h"
   10|       |
   11|       |#ifdef __cplusplus
   12|       |extern "C" {
   13|       |#endif
   14|       |
   15|       |/* Structure for defining custom output streams. You will need to provide
   16|       | * a callback function to write the bytes to your storage, which can be
   17|       | * for example a file or a network socket.
   18|       | *
   19|       | * The callback must conform to these rules:
   20|       | *
   21|       | * 1) Return false on IO errors. This will cause encoding to abort.
   22|       | * 2) You can use state to store your own data (e.g. buffer pointer).
   23|       | * 3) pb_write will update bytes_written after your callback runs.
   24|       | * 4) Substreams will modify max_size and bytes_written. Don't use them
   25|       | *    to calculate any pointers.
   26|       | */
   27|       |struct pb_ostream_s
   28|       |{
   29|       |#ifdef PB_BUFFER_ONLY
   30|       |    /* Callback pointer is not used in buffer-only configuration.
   31|       |     * Having an int pointer here allows binary compatibility but
   32|       |     * gives an error if someone tries to assign callback function.
   33|       |     * Also, NULL pointer marks a 'sizing stream' that does not
   34|       |     * write anything.
   35|       |     */
   36|       |    int *callback;
   37|       |#else
   38|       |    bool (*callback)(pb_ostream_t *stream, const pb_byte_t *buf, size_t count);
   39|       |#endif
   40|       |    void *state;          /* Free field for use by callback implementation. */
   41|       |    size_t max_size;      /* Limit number of output bytes written (or use SIZE_MAX). */
   42|       |    size_t bytes_written; /* Number of bytes written so far. */
   43|       |    
   44|       |#ifndef PB_NO_ERRMSG
   45|       |    const char *errmsg;
   46|       |#endif
   47|       |};
   48|       |
   49|       |/***************************
   50|       | * Main encoding functions *
   51|       | ***************************/
   52|       |
   53|       |/* Encode a single protocol buffers message from C structure into a stream.
   54|       | * Returns true on success, false on any failure.
   55|       | * The actual struct pointed to by src_struct must match the description in fields.
   56|       | * All required fields in the struct are assumed to have been filled in.
   57|       | *
   58|       | * Example usage:
   59|       | *    MyMessage msg = {};
   60|       | *    uint8_t buffer[64];
   61|       | *    pb_ostream_t stream;
   62|       | *
   63|       | *    msg.field1 = 42;
   64|       | *    stream = pb_ostream_from_buffer(buffer, sizeof(buffer));
   65|       | *    pb_encode(&stream, MyMessage_fields, &msg);
   66|       | */
   67|       |bool pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct);
   68|       |
   69|       |/* Same as pb_encode, but prepends the length of the message as a varint.
   70|       | * Corresponds to writeDelimitedTo() in Google's protobuf API.
   71|       | */
   72|       |bool pb_encode_delimited(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct);
   73|       |
   74|       |/* Same as pb_encode, but appends a null byte to the message for termination.
   75|       | * NOTE: This behaviour is not supported in most other protobuf implementations, so pb_encode_delimited()
   76|       | * is a better option for compatibility.
   77|       | */
   78|       |bool pb_encode_nullterminated(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct);
   79|       |
   80|       |/* Encode the message to get the size of the encoded data, but do not store
   81|       | * the data. */
   82|       |bool pb_get_encoded_size(size_t *size, const pb_field_t fields[], const void *src_struct);
   83|       |
   84|       |/**************************************
   85|       | * Functions for manipulating streams *
   86|       | **************************************/
   87|       |
   88|       |/* Create an output stream for writing into a memory buffer.
   89|       | * The number of bytes written can be found in stream.bytes_written after
   90|       | * encoding the message.
   91|       | *
   92|       | * Alternatively, you can use a custom stream that writes directly to e.g.
   93|       | * a file or a network socket.
   94|       | */
   95|       |pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize);
   96|       |
   97|       |/* Pseudo-stream for measuring the size of a message without actually storing
   98|       | * the encoded data.
   99|       | * 
  100|       | * Example usage:
  101|       | *    MyMessage msg = {};
  102|       | *    pb_ostream_t stream = PB_OSTREAM_SIZING;
  103|       | *    pb_encode(&stream, MyMessage_fields, &msg);
  104|       | *    printf("Message size is %d\n", stream.bytes_written);
  105|       | */
  106|       |#ifndef PB_NO_ERRMSG
  107|      0|#define PB_OSTREAM_SIZING {0,0,0,0,0}
  108|       |#else
  109|       |#define PB_OSTREAM_SIZING {0,0,0,0}
  110|       |#endif
  111|       |
  112|       |/* Function to write into a pb_ostream_t stream. You can use this if you need
  113|       | * to append or prepend some custom headers to the message.
  114|       | */
  115|       |bool pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count);
  116|       |
  117|       |
  118|       |/************************************************
  119|       | * Helper functions for writing field callbacks *
  120|       | ************************************************/
  121|       |
  122|       |/* Encode field header based on type and field number defined in the field
  123|       | * structure. Call this from the callback before writing out field contents. */
  124|       |bool pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field);
  125|       |
  126|       |/* Encode field header by manually specifying wire type. You need to use this
  127|       | * if you want to write out packed arrays from a callback field. */
  128|       |bool pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number);
  129|       |
  130|       |/* Encode an integer in the varint format.
  131|       | * This works for bool, enum, int32, int64, uint32 and uint64 field types. */
  132|       |#ifndef PB_WITHOUT_64BIT
  133|       |bool pb_encode_varint(pb_ostream_t *stream, uint64_t value);
  134|       |#else
  135|       |bool pb_encode_varint(pb_ostream_t *stream, uint32_t value);
  136|       |#endif
  137|       |
  138|       |/* Encode an integer in the zig-zagged svarint format.
  139|       | * This works for sint32 and sint64. */
  140|       |#ifndef PB_WITHOUT_64BIT
  141|       |bool pb_encode_svarint(pb_ostream_t *stream, int64_t value);
  142|       |#else
  143|       |bool pb_encode_svarint(pb_ostream_t *stream, int32_t value);
  144|       |#endif
  145|       |
  146|       |/* Encode a string or bytes type field. For strings, pass strlen(s) as size. */
  147|       |bool pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size);
  148|       |
  149|       |/* Encode a fixed32, sfixed32 or float value.
  150|       | * You need to pass a pointer to a 4-byte wide C variable. */
  151|       |bool pb_encode_fixed32(pb_ostream_t *stream, const void *value);
  152|       |
  153|       |#ifndef PB_WITHOUT_64BIT
  154|       |/* Encode a fixed64, sfixed64 or double value.
  155|       | * You need to pass a pointer to a 8-byte wide C variable. */
  156|       |bool pb_encode_fixed64(pb_ostream_t *stream, const void *value);
  157|       |#endif
  158|       |
  159|       |/* Encode a submessage field.
  160|       | * You need to pass the pb_field_t array and pointer to struct, just like
  161|       | * with pb_encode(). This internally encodes the submessage twice, first to
  162|       | * calculate message size and then to actually write it out.
  163|       | */
  164|       |bool pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct);
  165|       |
  166|       |#ifdef __cplusplus
  167|       |} /* extern "C" */
  168|       |#endif
  169|       |
  170|       |#endif

