/Users/lenar/Desktop/LHypothesis/Example/Tests/LHypothesisTests.swift:
    1|       |import Quick
    2|       |import Nimble
    3|       |@testable import LHypothesis
    4|       |
    5|       |final class LHypothesisTests: QuickSpec {
    6|       |  
    7|      1|  override func spec() {
    8|      1|    describe("LHypothesis tests") {
    9|      1|      describe("register providers") {
   10|      1|        var provider = StubAnalyticsProvider()
   11|      1|        var provider2 = AnotherStubAnalyticsProvider()
   12|      3|        beforeEach {
   13|      3|          provider = StubAnalyticsProvider()
   14|      3|          provider2 = AnotherStubAnalyticsProvider()
   15|      3|          Analytics.removeAllProviders()
   16|      3|        }
   17|      1|        context("register providers with array") {
   18|      1|          it("should register all providers") {
   19|      1|            expect(Analytics.providers.isEmpty).to(beTrue())
   20|      1|            Analytics.register([provider, provider2])
   21|      1|            expect(Analytics.providers.count).to(equal(2))
   22|      1|          }
   23|      1|        }
   24|      1|        context("register provider by single property") {
   25|      1|          it("should register each providers") {
   26|      1|            expect(Analytics.providers.isEmpty).to(beTrue())
   27|      1|            Analytics.register(provider)
   28|      1|            expect(Analytics.providers.count).to(equal(1))
   29|      1|            Analytics.register(provider2)
   30|      1|            expect(Analytics.providers.count).to(equal(2))
   31|      1|          }
   32|      1|        }
   33|      1|        context("register by infix operator") {
   34|      1|          it("should register each providers in chain") {
   35|      1|            expect(Analytics.providers.isEmpty).to(beTrue())
   36|      1|            Analytics.self <<~ provider <<~ provider2
   37|      1|            expect(Analytics.providers.count).to(equal(2))
   38|      1|          }
   39|      1|        }
   40|      1|      }
   41|      1|      
   42|      1|      describe("log launch and sign in") {
   43|      1|        var provider = StubAnalyticsProvider()
   44|      1|        var provider2 = AnotherStubAnalyticsProvider()
   45|      2|        beforeEach {
   46|      2|          provider = StubAnalyticsProvider()
   47|      2|          provider2 = AnotherStubAnalyticsProvider()
   48|      2|          Analytics.removeAllProviders()
   49|      2|          Analytics.register([provider, provider2])
   50|      2|        }
   51|      1|        context("with provider filter") {
   52|      1|          it("should record 2 events for 1 provider") {
   53|      1|            Analytics.log(event: TestEvents.launch, providersFilter: [StubAnalyticsProvider.self])
   54|      1|            Analytics.log(event: TestEvents.signIn(username: "username"), providersFilter: [StubAnalyticsProvider.self])
   55|      1|            expect((Analytics.providers[0] as? StubAnalyticsProvider)?.loggedEvents.count).to(equal(2))
   56|      1|            expect((Analytics.providers[1] as? AnotherStubAnalyticsProvider)?.loggedEvents.count).to(equal(0))
   57|      1|          }
   58|      1|        }
   59|      1|        context("without provider filter") {
   60|      1|          it("should record 2 events for all providers") {
   61|      1|            Analytics.log(event: TestEvents.launch)
   62|      1|            Analytics.log(event: TestEvents.signIn(username: "username"))
   63|      1|            expect((Analytics.providers[0] as? StubAnalyticsProvider)?.loggedEvents.count).to(equal(2))
   64|      1|            expect((Analytics.providers[1] as? AnotherStubAnalyticsProvider)?.loggedEvents.count).to(equal(2))
   65|      1|          }
   66|      1|        }
   67|      1|      }
   68|      1|      
   69|      1|      describe("set user id") {
   70|      1|        var provider = StubAnalyticsProvider()
   71|      1|        var provider2 = AnotherStubAnalyticsProvider()
   72|      2|        beforeEach {
   73|      2|          provider = StubAnalyticsProvider()
   74|      2|          provider2 = AnotherStubAnalyticsProvider()
   75|      2|          Analytics.removeAllProviders()
   76|      2|          Analytics.register([provider, provider2])
   77|      2|        }
   78|      1|        context("not nil value") {
   79|      1|          it("should set user id") {
   80|      1|            Analytics.setUserId("user_id")
   81|      1|            expect(provider.userId).to(equal("user_id"))
   82|      1|            expect(provider2.userId).to(equal("user_id"))
   83|      1|          }
   84|      1|        }
   85|      1|        
   86|      1|        context("nil value") {
   87|      1|          it("should remove user id") {
   88|      1|            Analytics.setUserId(nil)
   89|      1|            expect(provider.userId).to(beNil())
   90|      1|            expect(provider2.userId).to(beNil())
   91|      1|          }
   92|      1|        }
   93|      1|      }
   94|      1|      
   95|      1|      describe("set user properties") {
   96|      1|        var provider = StubAnalyticsProvider()
   97|      1|        var provider2 = AnotherStubAnalyticsProvider()
   98|      1|        beforeEach {
   99|      1|          provider = StubAnalyticsProvider()
  100|      1|          provider2 = AnotherStubAnalyticsProvider()
  101|      1|          Analytics.removeAllProviders()
  102|      1|          Analytics.register([provider, provider2])
  103|      1|        }
  104|      1|        it("should add user properites to analytics") {
  105|      1|          Analytics.setUserProperty("18", forName: "age")
  106|      1|          Analytics.setUserProperty(nil, forName: "gender")
  107|      1|          Analytics.setUserProperty("hobby", forName: "football", providersFilter: [StubAnalyticsProvider.self])
  108|      1|          
  109|      1|          expect(provider.userProperties.count).to(equal(3))
  110|      1|          expect(provider2.userProperties.count).to(equal(2))
  111|      1|          expect(provider.userProperties["football"]).to(equal("hobby"))
  112|      1|        }
  113|      1|      }
  114|      1|    }
  115|      1|    
  116|      1|    describe("AnalyticsProvider tests") {
  117|      1|      describe("get provider's name") {
  118|      1|        it("should return class name") {
  119|      1|          let provider = StubAnalyticsProvider()
  120|      1|          expect(provider.name).to(equal("StubAnalyticsProvider"))
  121|      1|        }
  122|      1|      }
  123|      1|    }
  124|      1|  }
  125|       |}
  126|       |
  127|       |enum TestEvents {
  128|       |  case launch
  129|       |  case signIn(username: String)
  130|       |}
  131|       |
  132|       |extension TestEvents: AnalyticsEvent {
  133|       |  
  134|      0|  var name: String {
  135|      0|    switch self {
  136|      0|    case .launch:
  137|      0|      return "launch"
  138|      0|    case .signIn:
  139|      0|      return "signIn"
  140|      0|    }
  141|      0|  }
  142|       |  
  143|      0|  var parameters: AnalyticsEventParameters? {
  144|      0|    switch self {
  145|      0|    case .launch: return nil
  146|      0|    case .signIn(let username): return ["username": username]
  147|      0|    }
  148|      0|  }
  149|       |  
  150|       |}
  151|       |
  152|       |class StubAnalyticsProvider: AnalyticsProvider {
  153|       |  
  154|     25|  var loggedEvents = [AnalyticsEvent]()
  155|       |  var userId: String? = nil
  156|     25|  var userProperties = [String: String?]()
  157|       |  
  158|      6|  func logEvent(_ event: AnalyticsEvent) {
  159|      6|    loggedEvents.append(event)
  160|      6|  }
  161|       |  
  162|      4|  func setUserId(_ userId: String?) {
  163|      4|    self.userId = userId
  164|      4|  }
  165|       |  
  166|      5|  func setUserProperty(_ property: String?, forName name: String) {
  167|      5|    userProperties[name] = property
  168|      5|  }
  169|       |  
  170|       |}
  171|       |
  172|       |final class AnotherStubAnalyticsProvider: StubAnalyticsProvider {}

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Core/AnalyticsProvider.swift:
    1|       |//
    2|       |//  AnalyticsProvider.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 16.11.2021.
    6|       |//
    7|       |
    8|       |public protocol AnalyticsProvider {
    9|       |  var name: String { get }
   10|       |  
   11|       |  func logEvent(_ event: AnalyticsEvent)
   12|       |  func setUserId(_ userId: String?)
   13|       |  func setUserProperty(_ property: String?, forName name: String)
   14|       |}
   15|       |
   16|       |extension AnalyticsProvider {
   17|       |  
   18|      1|  public var name: String {
   19|      1|    let type = type(of: self)
   20|      1|    return String(describing: type)
   21|      1|  }
   22|       |  
   23|       |}

/Users/lenar/Desktop/LHypothesis/LHypothesis/Classes/Core/LHypothesis.swift:
    1|       |//
    2|       |//  LHypothesis.swift
    3|       |//  LHypothesis
    4|       |//
    5|       |//  Created by Lenar Gilyazov on 16.11.2021.
    6|       |//
    7|       |
    8|       |import Foundation
    9|       |
   10|       |public enum Analytics {
   11|       |  
   12|       |  static var providers: [AnalyticsProvider] = []
   13|       |  
   14|      6|  public static func register(_ provider: AnalyticsProvider) {
   15|      6|    Self.providers.append(provider)
   16|      6|  }
   17|       |  
   18|      6|  public static func register(_ providers: [AnalyticsProvider]) {
   19|      6|    Self.providers.append(contentsOf: providers)
   20|      6|  }
   21|       |  
   22|      8|  public static func removeAllProviders() {
   23|      8|    Self.providers = []
   24|      8|  }
   25|       |  
   26|      6|  public static func log(event: AnalyticsEvent, providersFilter: [AnalyticsProvider.Type] = []) {
   27|      6|    if providersFilter.isEmpty {
   28|      6|      Self.providers.forEach {
   29|      6|        $0.logEvent(event)
   30|      6|      }
   31|      6|    } else {
   32|      6|      Self.providers.filter { provider in providersFilter.contains(where: { type(of: provider as Any) == $0 }) }.forEach {
   33|      3|        $0.logEvent(event)
   34|      3|      }
   35|      6|    }
   36|      6|  }
   37|       |  
   38|      4|  public static func setUserProperty(_ property: String?, forName name: String, providersFilter: [AnalyticsProvider.Type] = []) {
   39|      4|    if providersFilter.isEmpty {
   40|      6|      Self.providers.forEach {
   41|      6|        $0.setUserProperty(property, forName: name)
   42|      6|      }
   43|      4|    } else {
   44|      2|      Self.providers.filter { provider in providersFilter.contains(where: { type(of: provider as Any) == $0 }) }.forEach {
   45|      1|        $0.setUserProperty(property, forName: name)
   46|      1|      }
   47|      4|    }
   48|      4|  }
   49|       |  
   50|      2|  public static func setUserId(_ userId: String?) {
   51|      4|    Self.providers.forEach {
   52|      4|      $0.setUserId(userId)
   53|      4|    }
   54|      2|  }
   55|       |  
   56|       |}
   57|       |
   58|       |precedencegroup AnalyticalPrecedence {
   59|       |  associativity: left
   60|       |  higherThan: LogicalConjunctionPrecedence
   61|       |}
   62|       |
   63|       |infix operator <<~: AnalyticalPrecedence
   64|       |
   65|       |@discardableResult
   66|      4|public func <<~ (left: Analytics.Type, right: AnalyticsProvider) -> Analytics.Type {
   67|      4|  left.register(right)
   68|      4|  return left
   69|      4|}

